// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: farm_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Awaken.Contracts.Farm {

  /// <summary>Holder for reflection information generated from farm_contract.proto</summary>
  public static partial class FarmContractReflection {

    #region Descriptor
    /// <summary>File descriptor for farm_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FarmContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNmYXJtX2NvbnRyYWN0LnByb3RvGg9hZWxmL2NvcmUucHJvdG8aEmFlbGYv",
            "b3B0aW9ucy5wcm90bxobZ29vZ2xlL3Byb3RvYnVmL2VtcHR5LnByb3RvGh5n",
            "b29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8i/QEKD0luaXRpYWxpemVJ",
            "bnB1dBIoChFscF90b2tlbl9jb250cmFjdBgBIAEoCzINLmFlbGYuQWRkcmVz",
            "cxIOCgZibG9jazAYAiABKAMSDgoGYmxvY2sxGAMgASgDEiMKG2Rpc3RyaWJ1",
            "dGVfdG9rZW5fcGVyX2Jsb2NrMBgEIAEoAxIjChtkaXN0cmlidXRlX3Rva2Vu",
            "X3Blcl9ibG9jazEYBSABKAMSEwoLc3RhcnRfYmxvY2sYBiABKAMSDQoFY3lj",
            "bGUYByABKAMSFAoMdG90YWxfcmV3YXJkGAggASgDEhwKBWFkbWluGAkgASgL",
            "Mg0uYWVsZi5BZGRyZXNzIjcKFVNldEhhbHZpbmdQZXJpb2RJbnB1dBIOCgZi",
            "bG9jazAYASABKAMSDgoGYmxvY2sxGAIgASgDIkkKH1NldERpc3RyaWJ1dGVU",
            "b2tlblBlckJsb2NrSW5wdXQSEgoKcGVyX2Jsb2NrMBgBIAEoAxISCgpwZXJf",
            "YmxvY2sxGAIgASgDIkoKDEFkZFBvb2xJbnB1dBITCgthbGxvY19wb2ludBgB",
            "IAEoAxIQCghscF90b2tlbhgCIAEoCRITCgt3aXRoX3VwZGF0ZRgDIAEoCCIr",
            "CgxEZXBvc2l0SW5wdXQSCwoDcGlkGAEgASgFEg4KBmFtb3VudBgCIAEoAyIs",
            "Cg1XaXRoZHJhd0lucHV0EgsKA3BpZBgBIAEoBRIOCgZhbW91bnQYAiABKAMi",
            "UQoOTmV3UmV3YXJkSW5wdXQSEwoLdXNkdF9hbW91bnQYASABKAMSFQoNbmV3",
            "X3Blcl9ibG9jaxgCIAEoAxITCgtzdGFydF9ibG9jaxgDIAEoAyJYChFTZXRS",
            "ZURlcG9zaXRJbnB1dBIkCg1mYXJtX3R3b19wb29sGAEgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEh0KBnJvdXRlchgCIAEoCzINLmFlbGYuQWRkcmVzcyJjCg5SZURl",
            "cG9zaXRJbnB1dBILCgNwaWQYASABKAUSHwoXZGlzdHJpYnV0ZV90b2tlbl9h",
            "bW91bnQYAiABKAMSEgoKZWxmX2Ftb3VudBgDIAEoAxIPCgdjaGFubmVsGAQg",
            "ASgJIpQBCg5EZXBvc2l0THBJbnB1dBILCgNwaWQYASABKAUSHQoGc2VuZGVy",
            "GAIgASgLMg0uYWVsZi5BZGRyZXNzEiAKGGRpc3RyaWJ1dGVfdG9rZW5fYmFs",
            "YW5jZRgDIAEoAxITCgtlbGZfYmFsYW5jZRgEIAEoAxIfChdkaXN0cmlidXRl",
            "X3Rva2VuX2Ftb3VudBgFIAEoAyI4CgxQZW5kaW5nSW5wdXQSCwoDcGlkGAEg",
            "ASgFEhsKBHVzZXIYAiABKAsyDS5hZWxmLkFkZHJlc3MiQgoWR2V0UmVEZXBv",
            "c2l0TGltaXRJbnB1dBILCgNwaWQYASABKAUSGwoEdXNlchgCIAEoCzINLmFl",
            "bGYuQWRkcmVzcyJLCh9QZW5kaW5nTG9ja0Rpc3RyaWJ1dGVUb2tlbklucHV0",
            "EgsKA3BpZBgBIAEoBRIbCgR1c2VyGAIgASgLMg0uYWVsZi5BZGRyZXNzIjwK",
            "EEdldFVzZXJJbmZvSW5wdXQSCwoDcGlkGAEgASgFEhsKBHVzZXIYAiABKAsy",
            "DS5hZWxmLkFkZHJlc3MiRwoOU2V0V2VpZ2h0SW5wdXQSCwoDcGlkGAEgASgF",
            "EhMKC2FsbG9jX3BvaW50GAIgASgDEhMKC3dpdGhfdXBkYXRlGAMgASgIIkMK",
            "F0dldFJlZGVwb3NpdEFtb3VudElucHV0EgsKA3BpZBgBIAEoBRIbCgR1c2Vy",
            "GAIgASgLMg0uYWVsZi5BZGRyZXNzIlYKI0dldERpc3RyaWJ1dGVUb2tlbkJs",
            "b2NrUmV3YXJkT3V0cHV0EhQKDGJsb2NrX3Jld2FyZBgBIAEoAxIZChFibG9j",
            "a19sb2NrX3Jld2FyZBgCIAEoAyJbCg1QZW5kaW5nT3V0cHV0Eh8KF2Rpc3Ry",
            "aWJ1dGVfdG9rZW5fYW1vdW50GAEgASgDEhMKC3VzZHRfYW1vdW50GAIgASgD",
            "EhQKDGJsb2NrX251bWJlchgDIAEoAyKHAgoIVXNlckluZm8SDgoGYW1vdW50",
            "GAEgASgDEjcKHHJld2FyZF9kaXN0cmlidXRlX3Rva2VuX2RlYnQYAiABKAsy",
            "ES5hZWxmLkJpZ0ludFZhbHVlEjwKIXJld2FyZF9sb2NrX2Rpc3RyaWJ1dGVf",
            "dG9rZW5fZGVidBgDIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUSKwoQcmV3YXJk",
            "X3VzZHRfZGVidBgEIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUSFAoMbG9ja19w",
            "ZW5kaW5nGAUgASgDEhkKEWxhc3RfcmV3YXJkX2Jsb2NrGAYgASgDEhYKDmNs",
            "YWltZWRfYW1vdW50GAcgASgDItECCghQb29sSW5mbxIQCghscF90b2tlbhgB",
            "IAEoCRITCgthbGxvY19wb2ludBgCIAEoAxIZChFsYXN0X3Jld2FyZF9ibG9j",
            "axgDIAEoAxI5Ch5hY2NfZGlzdHJpYnV0ZV90b2tlbl9wZXJfc2hhcmUYBCAB",
            "KAsyES5hZWxmLkJpZ0ludFZhbHVlEj4KI2FjY19sb2NrX2Rpc3RyaWJ1dGVf",
            "dG9rZW5fcGVyX3NoYXJlGAUgASgLMhEuYWVsZi5CaWdJbnRWYWx1ZRItChJh",
            "Y2NfdXNkdF9wZXJfc2hhcmUYBiABKAsyES5hZWxmLkJpZ0ludFZhbHVlEhQK",
            "DHRvdGFsX2Ftb3VudBgHIAEoAxJDCihsYXN0X2FjY19sb2NrX2Rpc3RyaWJ1",
            "dGVfdG9rZW5fcGVyX3NoYXJlGAggASgLMhEuYWVsZi5CaWdJbnRWYWx1ZSJX",
            "CgdEZXBvc2l0EiIKBHVzZXIYASABKAsyDS5hZWxmLkFkZHJlc3NCBYiP9QEB",
            "EhIKA3BpZBgCIAEoBUIFiI/1AQESDgoGYW1vdW50GAMgASgDOgSguxgBIlgK",
            "CFdpdGhkcmF3EiIKBHVzZXIYASABKAsyDS5hZWxmLkFkZHJlc3NCBYiP9QEB",
            "EhIKA3BpZBgCIAEoBUIFiI/1AQESDgoGYW1vdW50GAMgASgDOgSguxgBIoMB",
            "CgxDbGFpbVJldmVudWUSIgoEdXNlchgBIAEoCzINLmFlbGYuQWRkcmVzc0IF",
            "iI/1AQESEgoDcGlkGAIgASgFQgWIj/UBARIhCgZhbW91bnQYAyABKAsyES5h",
            "ZWxmLkJpZ0ludFZhbHVlEhIKCnRva2VuX3R5cGUYBCABKAM6BKC7GAEiPAoJ",
            "V2VpZ2h0U2V0EgsKA3BpZBgBIAEoBRIcChRuZXdfYWxsb2NhdGlvbl9wb2lu",
            "dBgCIAEoAzoEoLsYASJ8CglQb29sQWRkZWQSDQoFdG9rZW4YASABKAkSCwoD",
            "cGlkGAIgASgFEhgKEGFsbG9jYXRpb25fcG9pbnQYAyABKAMSIAoYbGFzdF9y",
            "ZXdhcmRfYmxvY2tfaGVpZ2h0GAQgASgDEhEKCXBvb2xfdHlwZRgFIAEoAzoE",
            "oLsYASJ0ChpEaXN0cmlidXRlVG9rZW5QZXJCbG9ja1NldBInCh9uZXdfZGlz",
            "dHJpYnV0ZV90b2tlbl9wZXJfYmxvY2sxGAEgASgDEicKH25ld19kaXN0cmli",
            "dXRlX3Rva2VuX3Blcl9ibG9jazIYAiABKAM6BKC7GAEiOgoQSGFsdmluZ1Bl",
            "cmlvZFNldBIPCgdwZXJpb2QxGAEgASgDEg8KB3BlcmlvZDIYAiABKAM6BKC7",
            "GAEiVAoMTmV3UmV3YXJkU2V0EhMKC3N0YXJ0X2Jsb2NrGAEgASgDEhEKCWVu",
            "ZF9ibG9jaxgCIAEoAxIWCg51c2R0X3Blcl9ibG9jaxgDIAEoAzoEoLsYASJy",
            "CgpVcGRhdGVQb29sEgsKA3BpZBgBIAEoBRIfChdkaXN0cmlidXRlX3Rva2Vu",
            "X2Ftb3VudBgCIAEoAxITCgt1c2R0X2Ftb3VudBgDIAEoAxIbChN1cGRhdGVf",
            "YmxvY2tfaGVpZ2h0GAQgASgDOgSguxgBMskWCgxGYXJtQ29udHJhY3QSOAoK",
            "SW5pdGlhbGl6ZRIQLkluaXRpYWxpemVJbnB1dBoWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eSIAEkQKEFNldEhhbHZpbmdQZXJpb2QSFi5TZXRIYWx2aW5nUGVy",
            "aW9kSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJYChpTZXREaXN0",
            "cmlidXRlVG9rZW5QZXJCbG9jaxIgLlNldERpc3RyaWJ1dGVUb2tlblBlckJs",
            "b2NrSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIyCgdBZGRQb29s",
            "Eg0uQWRkUG9vbElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPAoM",
            "U2V0UmVEZXBvc2l0EhIuU2V0UmVEZXBvc2l0SW5wdXQaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABIyCgdTZXRUb29sEg0uYWVsZi5BZGRyZXNzGhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASMwoIU2V0T3duZXISDS5hZWxmLkFkZHJl",
            "c3MaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIzCghTZXRBZG1pbhINLmFl",
            "bGYuQWRkcmVzcxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjYKCU5ld1Jl",
            "d2FyZBIPLk5ld1Jld2FyZElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASNgoJU2V0V2VpZ2h0Eg8uU2V0V2VpZ2h0SW5wdXQaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABIyCgdEZXBvc2l0Eg0uRGVwb3NpdElucHV0GhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASNAoIV2l0aGRyYXcSDi5XaXRoZHJhd0lu",
            "cHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNgoJUmVEZXBvc2l0Eg8u",
            "UmVEZXBvc2l0SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJDCg9N",
            "YXNzVXBkYXRlUG9vbHMSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABJDCgpVcGRhdGVQb29sEhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDMyVmFsdWUaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJD",
            "CgtGaXhFbmRCbG9jaxIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABI2CglEZXBvc2l0THASDy5EZXBvc2l0",
            "THBJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEi8KB1BlbmRpbmcS",
            "DS5QZW5kaW5nSW5wdXQaDi5QZW5kaW5nT3V0cHV0IgWIifcBARJQChFHZXRS",
            "ZURlcG9zaXRMaW1pdBIXLkdldFJlRGVwb3NpdExpbWl0SW5wdXQaGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESaQodR2V0RGlzdHJpYnV0",
            "ZVRva2VuQmxvY2tSZXdhcmQSGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1",
            "ZRokLkdldERpc3RyaWJ1dGVUb2tlbkJsb2NrUmV3YXJkT3V0cHV0IgWIifcB",
            "ARJiChpQZW5kaW5nTG9ja0Rpc3RyaWJ1dGVUb2tlbhIgLlBlbmRpbmdMb2Nr",
            "RGlzdHJpYnV0ZVRva2VuSW5wdXQaGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZSIFiIn3AQESOAoIR2V0QWRtaW4SFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkaDS5hZWxmLkFkZHJlc3MiBYiJ9wEBEjgKCEdldE93bmVyEhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5Gg0uYWVsZi5BZGRyZXNzIgWIifcBARJcCh5HZXRT",
            "dGFydEJsb2NrT2ZEaXN0cmlidXRlVG9rZW4SFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESagos",
            "R2V0RGlzdHJpYnV0ZVRva2VuUGVyQmxvY2tDb25jZW50cmF0ZWRNaW5pbmcS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZSIFiIn3AQESaAoqR2V0RGlzdHJpYnV0ZVRva2VuUGVyQmxvY2tD",
            "b250aW51b3VzTWluaW5nEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBEk0KD0dldFVzZHRQZXJC",
            "bG9jaxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRobLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlIgWIifcBARJPChFHZXRVc2R0U3RhcnRCbG9jaxIWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eRobLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlIgWIifcBARJNCg9HZXRVc2R0RW5kQmxvY2sSFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQES",
            "RgoIR2V0Q3ljbGUSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESTwoRR2V0SGFsdmluZ1Blcmlv",
            "ZDASFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZSIFiIn3AQESTwoRR2V0SGFsdmluZ1BlcmlvZDESFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1",
            "ZSIFiIn3AQESTAoOR2V0VG90YWxSZXdhcmQSFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkaGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSIFiIn3AQESTQoP",
            "R2V0SXNzdWVkUmV3YXJkEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBEkkKC0dldEVuZEJsb2Nr",
            "EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWUiBYiJ9wEBEjIKC0dldFVzZXJJbmZvEhEuR2V0VXNlckluZm9J",
            "bnB1dBoJLlVzZXJJbmZvIgWIifcBARI8CgtHZXRQb29sSW5mbxIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQzMlZhbHVlGgkuUG9vbEluZm8iBYiJ9wEBElAKEkdl",
            "dFRvdGFsQWxsb2NQb2ludBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRobLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJLCg1HZXRQb29sTGVu",
            "Z3RoEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUiBYiJ9wEBElIKEkdldFJlZGVwb3NpdEFtb3VudBIYLkdl",
            "dFJlZGVwb3NpdEFtb3VudElucHV0GhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWUiBYiJ9wEBGhayzPYBEUZhcm1Db250cmFjdFN0YXRlQhiqAhVBd2Fr",
            "ZW4uQ29udHJhY3RzLkZhcm1iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.InitializeInput), global::Awaken.Contracts.Farm.InitializeInput.Parser, new[]{ "LpTokenContract", "Block0", "Block1", "DistributeTokenPerBlock0", "DistributeTokenPerBlock1", "StartBlock", "Cycle", "TotalReward", "Admin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.SetHalvingPeriodInput), global::Awaken.Contracts.Farm.SetHalvingPeriodInput.Parser, new[]{ "Block0", "Block1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.SetDistributeTokenPerBlockInput), global::Awaken.Contracts.Farm.SetDistributeTokenPerBlockInput.Parser, new[]{ "PerBlock0", "PerBlock1" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.AddPoolInput), global::Awaken.Contracts.Farm.AddPoolInput.Parser, new[]{ "AllocPoint", "LpToken", "WithUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.DepositInput), global::Awaken.Contracts.Farm.DepositInput.Parser, new[]{ "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.WithdrawInput), global::Awaken.Contracts.Farm.WithdrawInput.Parser, new[]{ "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.NewRewardInput), global::Awaken.Contracts.Farm.NewRewardInput.Parser, new[]{ "UsdtAmount", "NewPerBlock", "StartBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.SetReDepositInput), global::Awaken.Contracts.Farm.SetReDepositInput.Parser, new[]{ "FarmTwoPool", "Router" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.ReDepositInput), global::Awaken.Contracts.Farm.ReDepositInput.Parser, new[]{ "Pid", "DistributeTokenAmount", "ElfAmount", "Channel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.DepositLpInput), global::Awaken.Contracts.Farm.DepositLpInput.Parser, new[]{ "Pid", "Sender", "DistributeTokenBalance", "ElfBalance", "DistributeTokenAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.PendingInput), global::Awaken.Contracts.Farm.PendingInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.GetReDepositLimitInput), global::Awaken.Contracts.Farm.GetReDepositLimitInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.PendingLockDistributeTokenInput), global::Awaken.Contracts.Farm.PendingLockDistributeTokenInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.GetUserInfoInput), global::Awaken.Contracts.Farm.GetUserInfoInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.SetWeightInput), global::Awaken.Contracts.Farm.SetWeightInput.Parser, new[]{ "Pid", "AllocPoint", "WithUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.GetRedepositAmountInput), global::Awaken.Contracts.Farm.GetRedepositAmountInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.GetDistributeTokenBlockRewardOutput), global::Awaken.Contracts.Farm.GetDistributeTokenBlockRewardOutput.Parser, new[]{ "BlockReward", "BlockLockReward" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.PendingOutput), global::Awaken.Contracts.Farm.PendingOutput.Parser, new[]{ "DistributeTokenAmount", "UsdtAmount", "BlockNumber" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.UserInfo), global::Awaken.Contracts.Farm.UserInfo.Parser, new[]{ "Amount", "RewardDistributeTokenDebt", "RewardLockDistributeTokenDebt", "RewardUsdtDebt", "LockPending", "LastRewardBlock", "ClaimedAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.PoolInfo), global::Awaken.Contracts.Farm.PoolInfo.Parser, new[]{ "LpToken", "AllocPoint", "LastRewardBlock", "AccDistributeTokenPerShare", "AccLockDistributeTokenPerShare", "AccUsdtPerShare", "TotalAmount", "LastAccLockDistributeTokenPerShare" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.Deposit), global::Awaken.Contracts.Farm.Deposit.Parser, new[]{ "User", "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.Withdraw), global::Awaken.Contracts.Farm.Withdraw.Parser, new[]{ "User", "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.ClaimRevenue), global::Awaken.Contracts.Farm.ClaimRevenue.Parser, new[]{ "User", "Pid", "Amount", "TokenType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.WeightSet), global::Awaken.Contracts.Farm.WeightSet.Parser, new[]{ "Pid", "NewAllocationPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.PoolAdded), global::Awaken.Contracts.Farm.PoolAdded.Parser, new[]{ "Token", "Pid", "AllocationPoint", "LastRewardBlockHeight", "PoolType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.DistributeTokenPerBlockSet), global::Awaken.Contracts.Farm.DistributeTokenPerBlockSet.Parser, new[]{ "NewDistributeTokenPerBlock1", "NewDistributeTokenPerBlock2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.HalvingPeriodSet), global::Awaken.Contracts.Farm.HalvingPeriodSet.Parser, new[]{ "Period1", "Period2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.NewRewardSet), global::Awaken.Contracts.Farm.NewRewardSet.Parser, new[]{ "StartBlock", "EndBlock", "UsdtPerBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.Farm.UpdatePool), global::Awaken.Contracts.Farm.UpdatePool.Parser, new[]{ "Pid", "DistributeTokenAmount", "UsdtAmount", "UpdateBlockHeight" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// input 
  /// </summary>
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      lpTokenContract_ = other.lpTokenContract_ != null ? other.lpTokenContract_.Clone() : null;
      block0_ = other.block0_;
      block1_ = other.block1_;
      distributeTokenPerBlock0_ = other.distributeTokenPerBlock0_;
      distributeTokenPerBlock1_ = other.distributeTokenPerBlock1_;
      startBlock_ = other.startBlock_;
      cycle_ = other.cycle_;
      totalReward_ = other.totalReward_;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "lp_token_contract" field.</summary>
    public const int LpTokenContractFieldNumber = 1;
    private global::AElf.Types.Address lpTokenContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address LpTokenContract {
      get { return lpTokenContract_; }
      set {
        lpTokenContract_ = value;
      }
    }

    /// <summary>Field number for the "block0" field.</summary>
    public const int Block0FieldNumber = 2;
    private long block0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Block0 {
      get { return block0_; }
      set {
        block0_ = value;
      }
    }

    /// <summary>Field number for the "block1" field.</summary>
    public const int Block1FieldNumber = 3;
    private long block1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Block1 {
      get { return block1_; }
      set {
        block1_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_per_block0" field.</summary>
    public const int DistributeTokenPerBlock0FieldNumber = 4;
    private long distributeTokenPerBlock0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenPerBlock0 {
      get { return distributeTokenPerBlock0_; }
      set {
        distributeTokenPerBlock0_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_per_block1" field.</summary>
    public const int DistributeTokenPerBlock1FieldNumber = 5;
    private long distributeTokenPerBlock1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenPerBlock1 {
      get { return distributeTokenPerBlock1_; }
      set {
        distributeTokenPerBlock1_ = value;
      }
    }

    /// <summary>Field number for the "start_block" field.</summary>
    public const int StartBlockFieldNumber = 6;
    private long startBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartBlock {
      get { return startBlock_; }
      set {
        startBlock_ = value;
      }
    }

    /// <summary>Field number for the "cycle" field.</summary>
    public const int CycleFieldNumber = 7;
    private long cycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cycle {
      get { return cycle_; }
      set {
        cycle_ = value;
      }
    }

    /// <summary>Field number for the "total_reward" field.</summary>
    public const int TotalRewardFieldNumber = 8;
    private long totalReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalReward {
      get { return totalReward_; }
      set {
        totalReward_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 9;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LpTokenContract, other.LpTokenContract)) return false;
      if (Block0 != other.Block0) return false;
      if (Block1 != other.Block1) return false;
      if (DistributeTokenPerBlock0 != other.DistributeTokenPerBlock0) return false;
      if (DistributeTokenPerBlock1 != other.DistributeTokenPerBlock1) return false;
      if (StartBlock != other.StartBlock) return false;
      if (Cycle != other.Cycle) return false;
      if (TotalReward != other.TotalReward) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lpTokenContract_ != null) hash ^= LpTokenContract.GetHashCode();
      if (Block0 != 0L) hash ^= Block0.GetHashCode();
      if (Block1 != 0L) hash ^= Block1.GetHashCode();
      if (DistributeTokenPerBlock0 != 0L) hash ^= DistributeTokenPerBlock0.GetHashCode();
      if (DistributeTokenPerBlock1 != 0L) hash ^= DistributeTokenPerBlock1.GetHashCode();
      if (StartBlock != 0L) hash ^= StartBlock.GetHashCode();
      if (Cycle != 0L) hash ^= Cycle.GetHashCode();
      if (TotalReward != 0L) hash ^= TotalReward.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lpTokenContract_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LpTokenContract);
      }
      if (Block0 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Block0);
      }
      if (Block1 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Block1);
      }
      if (DistributeTokenPerBlock0 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DistributeTokenPerBlock0);
      }
      if (DistributeTokenPerBlock1 != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DistributeTokenPerBlock1);
      }
      if (StartBlock != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(StartBlock);
      }
      if (Cycle != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Cycle);
      }
      if (TotalReward != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalReward);
      }
      if (admin_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Admin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lpTokenContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LpTokenContract);
      }
      if (Block0 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Block0);
      }
      if (Block1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Block1);
      }
      if (DistributeTokenPerBlock0 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenPerBlock0);
      }
      if (DistributeTokenPerBlock1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenPerBlock1);
      }
      if (StartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartBlock);
      }
      if (Cycle != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cycle);
      }
      if (TotalReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalReward);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.lpTokenContract_ != null) {
        if (lpTokenContract_ == null) {
          LpTokenContract = new global::AElf.Types.Address();
        }
        LpTokenContract.MergeFrom(other.LpTokenContract);
      }
      if (other.Block0 != 0L) {
        Block0 = other.Block0;
      }
      if (other.Block1 != 0L) {
        Block1 = other.Block1;
      }
      if (other.DistributeTokenPerBlock0 != 0L) {
        DistributeTokenPerBlock0 = other.DistributeTokenPerBlock0;
      }
      if (other.DistributeTokenPerBlock1 != 0L) {
        DistributeTokenPerBlock1 = other.DistributeTokenPerBlock1;
      }
      if (other.StartBlock != 0L) {
        StartBlock = other.StartBlock;
      }
      if (other.Cycle != 0L) {
        Cycle = other.Cycle;
      }
      if (other.TotalReward != 0L) {
        TotalReward = other.TotalReward;
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (lpTokenContract_ == null) {
              LpTokenContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(LpTokenContract);
            break;
          }
          case 16: {
            Block0 = input.ReadInt64();
            break;
          }
          case 24: {
            Block1 = input.ReadInt64();
            break;
          }
          case 32: {
            DistributeTokenPerBlock0 = input.ReadInt64();
            break;
          }
          case 40: {
            DistributeTokenPerBlock1 = input.ReadInt64();
            break;
          }
          case 48: {
            StartBlock = input.ReadInt64();
            break;
          }
          case 56: {
            Cycle = input.ReadInt64();
            break;
          }
          case 64: {
            TotalReward = input.ReadInt64();
            break;
          }
          case 74: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetHalvingPeriodInput : pb::IMessage<SetHalvingPeriodInput> {
    private static readonly pb::MessageParser<SetHalvingPeriodInput> _parser = new pb::MessageParser<SetHalvingPeriodInput>(() => new SetHalvingPeriodInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetHalvingPeriodInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHalvingPeriodInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHalvingPeriodInput(SetHalvingPeriodInput other) : this() {
      block0_ = other.block0_;
      block1_ = other.block1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHalvingPeriodInput Clone() {
      return new SetHalvingPeriodInput(this);
    }

    /// <summary>Field number for the "block0" field.</summary>
    public const int Block0FieldNumber = 1;
    private long block0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Block0 {
      get { return block0_; }
      set {
        block0_ = value;
      }
    }

    /// <summary>Field number for the "block1" field.</summary>
    public const int Block1FieldNumber = 2;
    private long block1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Block1 {
      get { return block1_; }
      set {
        block1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetHalvingPeriodInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetHalvingPeriodInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Block0 != other.Block0) return false;
      if (Block1 != other.Block1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Block0 != 0L) hash ^= Block0.GetHashCode();
      if (Block1 != 0L) hash ^= Block1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Block0 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Block0);
      }
      if (Block1 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Block1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Block0 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Block0);
      }
      if (Block1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Block1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetHalvingPeriodInput other) {
      if (other == null) {
        return;
      }
      if (other.Block0 != 0L) {
        Block0 = other.Block0;
      }
      if (other.Block1 != 0L) {
        Block1 = other.Block1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Block0 = input.ReadInt64();
            break;
          }
          case 16: {
            Block1 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDistributeTokenPerBlockInput : pb::IMessage<SetDistributeTokenPerBlockInput> {
    private static readonly pb::MessageParser<SetDistributeTokenPerBlockInput> _parser = new pb::MessageParser<SetDistributeTokenPerBlockInput>(() => new SetDistributeTokenPerBlockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDistributeTokenPerBlockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDistributeTokenPerBlockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDistributeTokenPerBlockInput(SetDistributeTokenPerBlockInput other) : this() {
      perBlock0_ = other.perBlock0_;
      perBlock1_ = other.perBlock1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDistributeTokenPerBlockInput Clone() {
      return new SetDistributeTokenPerBlockInput(this);
    }

    /// <summary>Field number for the "per_block0" field.</summary>
    public const int PerBlock0FieldNumber = 1;
    private long perBlock0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PerBlock0 {
      get { return perBlock0_; }
      set {
        perBlock0_ = value;
      }
    }

    /// <summary>Field number for the "per_block1" field.</summary>
    public const int PerBlock1FieldNumber = 2;
    private long perBlock1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PerBlock1 {
      get { return perBlock1_; }
      set {
        perBlock1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDistributeTokenPerBlockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDistributeTokenPerBlockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PerBlock0 != other.PerBlock0) return false;
      if (PerBlock1 != other.PerBlock1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PerBlock0 != 0L) hash ^= PerBlock0.GetHashCode();
      if (PerBlock1 != 0L) hash ^= PerBlock1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PerBlock0 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PerBlock0);
      }
      if (PerBlock1 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PerBlock1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PerBlock0 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PerBlock0);
      }
      if (PerBlock1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PerBlock1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDistributeTokenPerBlockInput other) {
      if (other == null) {
        return;
      }
      if (other.PerBlock0 != 0L) {
        PerBlock0 = other.PerBlock0;
      }
      if (other.PerBlock1 != 0L) {
        PerBlock1 = other.PerBlock1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PerBlock0 = input.ReadInt64();
            break;
          }
          case 16: {
            PerBlock1 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddPoolInput : pb::IMessage<AddPoolInput> {
    private static readonly pb::MessageParser<AddPoolInput> _parser = new pb::MessageParser<AddPoolInput>(() => new AddPoolInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddPoolInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPoolInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPoolInput(AddPoolInput other) : this() {
      allocPoint_ = other.allocPoint_;
      lpToken_ = other.lpToken_;
      withUpdate_ = other.withUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddPoolInput Clone() {
      return new AddPoolInput(this);
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 1;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "lp_token" field.</summary>
    public const int LpTokenFieldNumber = 2;
    private string lpToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LpToken {
      get { return lpToken_; }
      set {
        lpToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "with_update" field.</summary>
    public const int WithUpdateFieldNumber = 3;
    private bool withUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithUpdate {
      get { return withUpdate_; }
      set {
        withUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddPoolInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddPoolInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllocPoint != other.AllocPoint) return false;
      if (LpToken != other.LpToken) return false;
      if (WithUpdate != other.WithUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (LpToken.Length != 0) hash ^= LpToken.GetHashCode();
      if (WithUpdate != false) hash ^= WithUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllocPoint != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllocPoint);
      }
      if (LpToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LpToken);
      }
      if (WithUpdate != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (LpToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LpToken);
      }
      if (WithUpdate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddPoolInput other) {
      if (other == null) {
        return;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.LpToken.Length != 0) {
        LpToken = other.LpToken;
      }
      if (other.WithUpdate != false) {
        WithUpdate = other.WithUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 18: {
            LpToken = input.ReadString();
            break;
          }
          case 24: {
            WithUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepositInput : pb::IMessage<DepositInput> {
    private static readonly pb::MessageParser<DepositInput> _parser = new pb::MessageParser<DepositInput>(() => new DepositInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepositInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput(DepositInput other) : this() {
      pid_ = other.pid_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput Clone() {
      return new DepositInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepositInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepositInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepositInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawInput : pb::IMessage<WithdrawInput> {
    private static readonly pb::MessageParser<WithdrawInput> _parser = new pb::MessageParser<WithdrawInput>(() => new WithdrawInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput(WithdrawInput other) : this() {
      pid_ = other.pid_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput Clone() {
      return new WithdrawInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewRewardInput : pb::IMessage<NewRewardInput> {
    private static readonly pb::MessageParser<NewRewardInput> _parser = new pb::MessageParser<NewRewardInput>(() => new NewRewardInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewRewardInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardInput(NewRewardInput other) : this() {
      usdtAmount_ = other.usdtAmount_;
      newPerBlock_ = other.newPerBlock_;
      startBlock_ = other.startBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardInput Clone() {
      return new NewRewardInput(this);
    }

    /// <summary>Field number for the "usdt_amount" field.</summary>
    public const int UsdtAmountFieldNumber = 1;
    private long usdtAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsdtAmount {
      get { return usdtAmount_; }
      set {
        usdtAmount_ = value;
      }
    }

    /// <summary>Field number for the "new_per_block" field.</summary>
    public const int NewPerBlockFieldNumber = 2;
    private long newPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewPerBlock {
      get { return newPerBlock_; }
      set {
        newPerBlock_ = value;
      }
    }

    /// <summary>Field number for the "start_block" field.</summary>
    public const int StartBlockFieldNumber = 3;
    private long startBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartBlock {
      get { return startBlock_; }
      set {
        startBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewRewardInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewRewardInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UsdtAmount != other.UsdtAmount) return false;
      if (NewPerBlock != other.NewPerBlock) return false;
      if (StartBlock != other.StartBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UsdtAmount != 0L) hash ^= UsdtAmount.GetHashCode();
      if (NewPerBlock != 0L) hash ^= NewPerBlock.GetHashCode();
      if (StartBlock != 0L) hash ^= StartBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UsdtAmount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UsdtAmount);
      }
      if (NewPerBlock != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NewPerBlock);
      }
      if (StartBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UsdtAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsdtAmount);
      }
      if (NewPerBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewPerBlock);
      }
      if (StartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewRewardInput other) {
      if (other == null) {
        return;
      }
      if (other.UsdtAmount != 0L) {
        UsdtAmount = other.UsdtAmount;
      }
      if (other.NewPerBlock != 0L) {
        NewPerBlock = other.NewPerBlock;
      }
      if (other.StartBlock != 0L) {
        StartBlock = other.StartBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UsdtAmount = input.ReadInt64();
            break;
          }
          case 16: {
            NewPerBlock = input.ReadInt64();
            break;
          }
          case 24: {
            StartBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetReDepositInput : pb::IMessage<SetReDepositInput> {
    private static readonly pb::MessageParser<SetReDepositInput> _parser = new pb::MessageParser<SetReDepositInput>(() => new SetReDepositInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetReDepositInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReDepositInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReDepositInput(SetReDepositInput other) : this() {
      farmTwoPool_ = other.farmTwoPool_ != null ? other.farmTwoPool_.Clone() : null;
      router_ = other.router_ != null ? other.router_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetReDepositInput Clone() {
      return new SetReDepositInput(this);
    }

    /// <summary>Field number for the "farm_two_pool" field.</summary>
    public const int FarmTwoPoolFieldNumber = 1;
    private global::AElf.Types.Address farmTwoPool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address FarmTwoPool {
      get { return farmTwoPool_; }
      set {
        farmTwoPool_ = value;
      }
    }

    /// <summary>Field number for the "router" field.</summary>
    public const int RouterFieldNumber = 2;
    private global::AElf.Types.Address router_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Router {
      get { return router_; }
      set {
        router_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetReDepositInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetReDepositInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FarmTwoPool, other.FarmTwoPool)) return false;
      if (!object.Equals(Router, other.Router)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (farmTwoPool_ != null) hash ^= FarmTwoPool.GetHashCode();
      if (router_ != null) hash ^= Router.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (farmTwoPool_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FarmTwoPool);
      }
      if (router_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Router);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (farmTwoPool_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FarmTwoPool);
      }
      if (router_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Router);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetReDepositInput other) {
      if (other == null) {
        return;
      }
      if (other.farmTwoPool_ != null) {
        if (farmTwoPool_ == null) {
          FarmTwoPool = new global::AElf.Types.Address();
        }
        FarmTwoPool.MergeFrom(other.FarmTwoPool);
      }
      if (other.router_ != null) {
        if (router_ == null) {
          Router = new global::AElf.Types.Address();
        }
        Router.MergeFrom(other.Router);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (farmTwoPool_ == null) {
              FarmTwoPool = new global::AElf.Types.Address();
            }
            input.ReadMessage(FarmTwoPool);
            break;
          }
          case 18: {
            if (router_ == null) {
              Router = new global::AElf.Types.Address();
            }
            input.ReadMessage(Router);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReDepositInput : pb::IMessage<ReDepositInput> {
    private static readonly pb::MessageParser<ReDepositInput> _parser = new pb::MessageParser<ReDepositInput>(() => new ReDepositInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReDepositInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReDepositInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReDepositInput(ReDepositInput other) : this() {
      pid_ = other.pid_;
      distributeTokenAmount_ = other.distributeTokenAmount_;
      elfAmount_ = other.elfAmount_;
      channel_ = other.channel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReDepositInput Clone() {
      return new ReDepositInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_amount" field.</summary>
    public const int DistributeTokenAmountFieldNumber = 2;
    private long distributeTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenAmount {
      get { return distributeTokenAmount_; }
      set {
        distributeTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "elf_amount" field.</summary>
    public const int ElfAmountFieldNumber = 3;
    private long elfAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElfAmount {
      get { return elfAmount_; }
      set {
        elfAmount_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 4;
    private string channel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Channel {
      get { return channel_; }
      set {
        channel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReDepositInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReDepositInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (DistributeTokenAmount != other.DistributeTokenAmount) return false;
      if (ElfAmount != other.ElfAmount) return false;
      if (Channel != other.Channel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (DistributeTokenAmount != 0L) hash ^= DistributeTokenAmount.GetHashCode();
      if (ElfAmount != 0L) hash ^= ElfAmount.GetHashCode();
      if (Channel.Length != 0) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (DistributeTokenAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DistributeTokenAmount);
      }
      if (ElfAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ElfAmount);
      }
      if (Channel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (DistributeTokenAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenAmount);
      }
      if (ElfAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElfAmount);
      }
      if (Channel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReDepositInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.DistributeTokenAmount != 0L) {
        DistributeTokenAmount = other.DistributeTokenAmount;
      }
      if (other.ElfAmount != 0L) {
        ElfAmount = other.ElfAmount;
      }
      if (other.Channel.Length != 0) {
        Channel = other.Channel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            DistributeTokenAmount = input.ReadInt64();
            break;
          }
          case 24: {
            ElfAmount = input.ReadInt64();
            break;
          }
          case 34: {
            Channel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepositLpInput : pb::IMessage<DepositLpInput> {
    private static readonly pb::MessageParser<DepositLpInput> _parser = new pb::MessageParser<DepositLpInput>(() => new DepositLpInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepositLpInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositLpInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositLpInput(DepositLpInput other) : this() {
      pid_ = other.pid_;
      sender_ = other.sender_ != null ? other.sender_.Clone() : null;
      distributeTokenBalance_ = other.distributeTokenBalance_;
      elfBalance_ = other.elfBalance_;
      distributeTokenAmount_ = other.distributeTokenAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositLpInput Clone() {
      return new DepositLpInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 2;
    private global::AElf.Types.Address sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_balance" field.</summary>
    public const int DistributeTokenBalanceFieldNumber = 3;
    private long distributeTokenBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenBalance {
      get { return distributeTokenBalance_; }
      set {
        distributeTokenBalance_ = value;
      }
    }

    /// <summary>Field number for the "elf_balance" field.</summary>
    public const int ElfBalanceFieldNumber = 4;
    private long elfBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ElfBalance {
      get { return elfBalance_; }
      set {
        elfBalance_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_amount" field.</summary>
    public const int DistributeTokenAmountFieldNumber = 5;
    private long distributeTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenAmount {
      get { return distributeTokenAmount_; }
      set {
        distributeTokenAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepositLpInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepositLpInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(Sender, other.Sender)) return false;
      if (DistributeTokenBalance != other.DistributeTokenBalance) return false;
      if (ElfBalance != other.ElfBalance) return false;
      if (DistributeTokenAmount != other.DistributeTokenAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (sender_ != null) hash ^= Sender.GetHashCode();
      if (DistributeTokenBalance != 0L) hash ^= DistributeTokenBalance.GetHashCode();
      if (ElfBalance != 0L) hash ^= ElfBalance.GetHashCode();
      if (DistributeTokenAmount != 0L) hash ^= DistributeTokenAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (sender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sender);
      }
      if (DistributeTokenBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DistributeTokenBalance);
      }
      if (ElfBalance != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ElfBalance);
      }
      if (DistributeTokenAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(DistributeTokenAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (sender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sender);
      }
      if (DistributeTokenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenBalance);
      }
      if (ElfBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ElfBalance);
      }
      if (DistributeTokenAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepositLpInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.sender_ != null) {
        if (sender_ == null) {
          Sender = new global::AElf.Types.Address();
        }
        Sender.MergeFrom(other.Sender);
      }
      if (other.DistributeTokenBalance != 0L) {
        DistributeTokenBalance = other.DistributeTokenBalance;
      }
      if (other.ElfBalance != 0L) {
        ElfBalance = other.ElfBalance;
      }
      if (other.DistributeTokenAmount != 0L) {
        DistributeTokenAmount = other.DistributeTokenAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (sender_ == null) {
              Sender = new global::AElf.Types.Address();
            }
            input.ReadMessage(Sender);
            break;
          }
          case 24: {
            DistributeTokenBalance = input.ReadInt64();
            break;
          }
          case 32: {
            ElfBalance = input.ReadInt64();
            break;
          }
          case 40: {
            DistributeTokenAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingInput : pb::IMessage<PendingInput> {
    private static readonly pb::MessageParser<PendingInput> _parser = new pb::MessageParser<PendingInput>(() => new PendingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput(PendingInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput Clone() {
      return new PendingInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReDepositLimitInput : pb::IMessage<GetReDepositLimitInput> {
    private static readonly pb::MessageParser<GetReDepositLimitInput> _parser = new pb::MessageParser<GetReDepositLimitInput>(() => new GetReDepositLimitInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReDepositLimitInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReDepositLimitInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReDepositLimitInput(GetReDepositLimitInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReDepositLimitInput Clone() {
      return new GetReDepositLimitInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReDepositLimitInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReDepositLimitInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReDepositLimitInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingLockDistributeTokenInput : pb::IMessage<PendingLockDistributeTokenInput> {
    private static readonly pb::MessageParser<PendingLockDistributeTokenInput> _parser = new pb::MessageParser<PendingLockDistributeTokenInput>(() => new PendingLockDistributeTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingLockDistributeTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingLockDistributeTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingLockDistributeTokenInput(PendingLockDistributeTokenInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingLockDistributeTokenInput Clone() {
      return new PendingLockDistributeTokenInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingLockDistributeTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingLockDistributeTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingLockDistributeTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetUserInfoInput : pb::IMessage<GetUserInfoInput> {
    private static readonly pb::MessageParser<GetUserInfoInput> _parser = new pb::MessageParser<GetUserInfoInput>(() => new GetUserInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUserInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserInfoInput(GetUserInfoInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUserInfoInput Clone() {
      return new GetUserInfoInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUserInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUserInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUserInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetWeightInput : pb::IMessage<SetWeightInput> {
    private static readonly pb::MessageParser<SetWeightInput> _parser = new pb::MessageParser<SetWeightInput>(() => new SetWeightInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetWeightInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWeightInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWeightInput(SetWeightInput other) : this() {
      pid_ = other.pid_;
      allocPoint_ = other.allocPoint_;
      withUpdate_ = other.withUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetWeightInput Clone() {
      return new SetWeightInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 2;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "with_update" field.</summary>
    public const int WithUpdateFieldNumber = 3;
    private bool withUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithUpdate {
      get { return withUpdate_; }
      set {
        withUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetWeightInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetWeightInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (AllocPoint != other.AllocPoint) return false;
      if (WithUpdate != other.WithUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (WithUpdate != false) hash ^= WithUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (AllocPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocPoint);
      }
      if (WithUpdate != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (WithUpdate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetWeightInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.WithUpdate != false) {
        WithUpdate = other.WithUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 24: {
            WithUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRedepositAmountInput : pb::IMessage<GetRedepositAmountInput> {
    private static readonly pb::MessageParser<GetRedepositAmountInput> _parser = new pb::MessageParser<GetRedepositAmountInput>(() => new GetRedepositAmountInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRedepositAmountInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRedepositAmountInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRedepositAmountInput(GetRedepositAmountInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRedepositAmountInput Clone() {
      return new GetRedepositAmountInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRedepositAmountInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRedepositAmountInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRedepositAmountInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Output
  /// </summary>
  public sealed partial class GetDistributeTokenBlockRewardOutput : pb::IMessage<GetDistributeTokenBlockRewardOutput> {
    private static readonly pb::MessageParser<GetDistributeTokenBlockRewardOutput> _parser = new pb::MessageParser<GetDistributeTokenBlockRewardOutput>(() => new GetDistributeTokenBlockRewardOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDistributeTokenBlockRewardOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDistributeTokenBlockRewardOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDistributeTokenBlockRewardOutput(GetDistributeTokenBlockRewardOutput other) : this() {
      blockReward_ = other.blockReward_;
      blockLockReward_ = other.blockLockReward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDistributeTokenBlockRewardOutput Clone() {
      return new GetDistributeTokenBlockRewardOutput(this);
    }

    /// <summary>Field number for the "block_reward" field.</summary>
    public const int BlockRewardFieldNumber = 1;
    private long blockReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockReward {
      get { return blockReward_; }
      set {
        blockReward_ = value;
      }
    }

    /// <summary>Field number for the "block_lock_reward" field.</summary>
    public const int BlockLockRewardFieldNumber = 2;
    private long blockLockReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockLockReward {
      get { return blockLockReward_; }
      set {
        blockLockReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDistributeTokenBlockRewardOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDistributeTokenBlockRewardOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockReward != other.BlockReward) return false;
      if (BlockLockReward != other.BlockLockReward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockReward != 0L) hash ^= BlockReward.GetHashCode();
      if (BlockLockReward != 0L) hash ^= BlockLockReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockReward != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BlockReward);
      }
      if (BlockLockReward != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BlockLockReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockReward);
      }
      if (BlockLockReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockLockReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDistributeTokenBlockRewardOutput other) {
      if (other == null) {
        return;
      }
      if (other.BlockReward != 0L) {
        BlockReward = other.BlockReward;
      }
      if (other.BlockLockReward != 0L) {
        BlockLockReward = other.BlockLockReward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BlockReward = input.ReadInt64();
            break;
          }
          case 16: {
            BlockLockReward = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingOutput : pb::IMessage<PendingOutput> {
    private static readonly pb::MessageParser<PendingOutput> _parser = new pb::MessageParser<PendingOutput>(() => new PendingOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingOutput(PendingOutput other) : this() {
      distributeTokenAmount_ = other.distributeTokenAmount_;
      usdtAmount_ = other.usdtAmount_;
      blockNumber_ = other.blockNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingOutput Clone() {
      return new PendingOutput(this);
    }

    /// <summary>Field number for the "distribute_token_amount" field.</summary>
    public const int DistributeTokenAmountFieldNumber = 1;
    private long distributeTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenAmount {
      get { return distributeTokenAmount_; }
      set {
        distributeTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "usdt_amount" field.</summary>
    public const int UsdtAmountFieldNumber = 2;
    private long usdtAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsdtAmount {
      get { return usdtAmount_; }
      set {
        usdtAmount_ = value;
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private long blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistributeTokenAmount != other.DistributeTokenAmount) return false;
      if (UsdtAmount != other.UsdtAmount) return false;
      if (BlockNumber != other.BlockNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistributeTokenAmount != 0L) hash ^= DistributeTokenAmount.GetHashCode();
      if (UsdtAmount != 0L) hash ^= UsdtAmount.GetHashCode();
      if (BlockNumber != 0L) hash ^= BlockNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistributeTokenAmount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DistributeTokenAmount);
      }
      if (UsdtAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UsdtAmount);
      }
      if (BlockNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BlockNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistributeTokenAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenAmount);
      }
      if (UsdtAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsdtAmount);
      }
      if (BlockNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingOutput other) {
      if (other == null) {
        return;
      }
      if (other.DistributeTokenAmount != 0L) {
        DistributeTokenAmount = other.DistributeTokenAmount;
      }
      if (other.UsdtAmount != 0L) {
        UsdtAmount = other.UsdtAmount;
      }
      if (other.BlockNumber != 0L) {
        BlockNumber = other.BlockNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DistributeTokenAmount = input.ReadInt64();
            break;
          }
          case 16: {
            UsdtAmount = input.ReadInt64();
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Struct
  /// </summary>
  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      amount_ = other.amount_;
      rewardDistributeTokenDebt_ = other.rewardDistributeTokenDebt_ != null ? other.rewardDistributeTokenDebt_.Clone() : null;
      rewardLockDistributeTokenDebt_ = other.rewardLockDistributeTokenDebt_ != null ? other.rewardLockDistributeTokenDebt_.Clone() : null;
      rewardUsdtDebt_ = other.rewardUsdtDebt_ != null ? other.rewardUsdtDebt_.Clone() : null;
      lockPending_ = other.lockPending_;
      lastRewardBlock_ = other.lastRewardBlock_;
      claimedAmount_ = other.claimedAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "reward_distribute_token_debt" field.</summary>
    public const int RewardDistributeTokenDebtFieldNumber = 2;
    private global::AElf.Types.BigIntValue rewardDistributeTokenDebt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue RewardDistributeTokenDebt {
      get { return rewardDistributeTokenDebt_; }
      set {
        rewardDistributeTokenDebt_ = value;
      }
    }

    /// <summary>Field number for the "reward_lock_distribute_token_debt" field.</summary>
    public const int RewardLockDistributeTokenDebtFieldNumber = 3;
    private global::AElf.Types.BigIntValue rewardLockDistributeTokenDebt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue RewardLockDistributeTokenDebt {
      get { return rewardLockDistributeTokenDebt_; }
      set {
        rewardLockDistributeTokenDebt_ = value;
      }
    }

    /// <summary>Field number for the "reward_usdt_debt" field.</summary>
    public const int RewardUsdtDebtFieldNumber = 4;
    private global::AElf.Types.BigIntValue rewardUsdtDebt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue RewardUsdtDebt {
      get { return rewardUsdtDebt_; }
      set {
        rewardUsdtDebt_ = value;
      }
    }

    /// <summary>Field number for the "lock_pending" field.</summary>
    public const int LockPendingFieldNumber = 5;
    private long lockPending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockPending {
      get { return lockPending_; }
      set {
        lockPending_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block" field.</summary>
    public const int LastRewardBlockFieldNumber = 6;
    private long lastRewardBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlock {
      get { return lastRewardBlock_; }
      set {
        lastRewardBlock_ = value;
      }
    }

    /// <summary>Field number for the "claimed_amount" field.</summary>
    public const int ClaimedAmountFieldNumber = 7;
    private long claimedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClaimedAmount {
      get { return claimedAmount_; }
      set {
        claimedAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      if (!object.Equals(RewardDistributeTokenDebt, other.RewardDistributeTokenDebt)) return false;
      if (!object.Equals(RewardLockDistributeTokenDebt, other.RewardLockDistributeTokenDebt)) return false;
      if (!object.Equals(RewardUsdtDebt, other.RewardUsdtDebt)) return false;
      if (LockPending != other.LockPending) return false;
      if (LastRewardBlock != other.LastRewardBlock) return false;
      if (ClaimedAmount != other.ClaimedAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (rewardDistributeTokenDebt_ != null) hash ^= RewardDistributeTokenDebt.GetHashCode();
      if (rewardLockDistributeTokenDebt_ != null) hash ^= RewardLockDistributeTokenDebt.GetHashCode();
      if (rewardUsdtDebt_ != null) hash ^= RewardUsdtDebt.GetHashCode();
      if (LockPending != 0L) hash ^= LockPending.GetHashCode();
      if (LastRewardBlock != 0L) hash ^= LastRewardBlock.GetHashCode();
      if (ClaimedAmount != 0L) hash ^= ClaimedAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amount);
      }
      if (rewardDistributeTokenDebt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RewardDistributeTokenDebt);
      }
      if (rewardLockDistributeTokenDebt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RewardLockDistributeTokenDebt);
      }
      if (rewardUsdtDebt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RewardUsdtDebt);
      }
      if (LockPending != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LockPending);
      }
      if (LastRewardBlock != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastRewardBlock);
      }
      if (ClaimedAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ClaimedAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (rewardDistributeTokenDebt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardDistributeTokenDebt);
      }
      if (rewardLockDistributeTokenDebt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardLockDistributeTokenDebt);
      }
      if (rewardUsdtDebt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardUsdtDebt);
      }
      if (LockPending != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockPending);
      }
      if (LastRewardBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlock);
      }
      if (ClaimedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClaimedAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.rewardDistributeTokenDebt_ != null) {
        if (rewardDistributeTokenDebt_ == null) {
          RewardDistributeTokenDebt = new global::AElf.Types.BigIntValue();
        }
        RewardDistributeTokenDebt.MergeFrom(other.RewardDistributeTokenDebt);
      }
      if (other.rewardLockDistributeTokenDebt_ != null) {
        if (rewardLockDistributeTokenDebt_ == null) {
          RewardLockDistributeTokenDebt = new global::AElf.Types.BigIntValue();
        }
        RewardLockDistributeTokenDebt.MergeFrom(other.RewardLockDistributeTokenDebt);
      }
      if (other.rewardUsdtDebt_ != null) {
        if (rewardUsdtDebt_ == null) {
          RewardUsdtDebt = new global::AElf.Types.BigIntValue();
        }
        RewardUsdtDebt.MergeFrom(other.RewardUsdtDebt);
      }
      if (other.LockPending != 0L) {
        LockPending = other.LockPending;
      }
      if (other.LastRewardBlock != 0L) {
        LastRewardBlock = other.LastRewardBlock;
      }
      if (other.ClaimedAmount != 0L) {
        ClaimedAmount = other.ClaimedAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadInt64();
            break;
          }
          case 18: {
            if (rewardDistributeTokenDebt_ == null) {
              RewardDistributeTokenDebt = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(RewardDistributeTokenDebt);
            break;
          }
          case 26: {
            if (rewardLockDistributeTokenDebt_ == null) {
              RewardLockDistributeTokenDebt = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(RewardLockDistributeTokenDebt);
            break;
          }
          case 34: {
            if (rewardUsdtDebt_ == null) {
              RewardUsdtDebt = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(RewardUsdtDebt);
            break;
          }
          case 40: {
            LockPending = input.ReadInt64();
            break;
          }
          case 48: {
            LastRewardBlock = input.ReadInt64();
            break;
          }
          case 56: {
            ClaimedAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolInfo : pb::IMessage<PoolInfo> {
    private static readonly pb::MessageParser<PoolInfo> _parser = new pb::MessageParser<PoolInfo>(() => new PoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfo(PoolInfo other) : this() {
      lpToken_ = other.lpToken_;
      allocPoint_ = other.allocPoint_;
      lastRewardBlock_ = other.lastRewardBlock_;
      accDistributeTokenPerShare_ = other.accDistributeTokenPerShare_ != null ? other.accDistributeTokenPerShare_.Clone() : null;
      accLockDistributeTokenPerShare_ = other.accLockDistributeTokenPerShare_ != null ? other.accLockDistributeTokenPerShare_.Clone() : null;
      accUsdtPerShare_ = other.accUsdtPerShare_ != null ? other.accUsdtPerShare_.Clone() : null;
      totalAmount_ = other.totalAmount_;
      lastAccLockDistributeTokenPerShare_ = other.lastAccLockDistributeTokenPerShare_ != null ? other.lastAccLockDistributeTokenPerShare_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfo Clone() {
      return new PoolInfo(this);
    }

    /// <summary>Field number for the "lp_token" field.</summary>
    public const int LpTokenFieldNumber = 1;
    private string lpToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LpToken {
      get { return lpToken_; }
      set {
        lpToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 2;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block" field.</summary>
    public const int LastRewardBlockFieldNumber = 3;
    private long lastRewardBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlock {
      get { return lastRewardBlock_; }
      set {
        lastRewardBlock_ = value;
      }
    }

    /// <summary>Field number for the "acc_distribute_token_per_share" field.</summary>
    public const int AccDistributeTokenPerShareFieldNumber = 4;
    private global::AElf.Types.BigIntValue accDistributeTokenPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue AccDistributeTokenPerShare {
      get { return accDistributeTokenPerShare_; }
      set {
        accDistributeTokenPerShare_ = value;
      }
    }

    /// <summary>Field number for the "acc_lock_distribute_token_per_share" field.</summary>
    public const int AccLockDistributeTokenPerShareFieldNumber = 5;
    private global::AElf.Types.BigIntValue accLockDistributeTokenPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue AccLockDistributeTokenPerShare {
      get { return accLockDistributeTokenPerShare_; }
      set {
        accLockDistributeTokenPerShare_ = value;
      }
    }

    /// <summary>Field number for the "acc_usdt_per_share" field.</summary>
    public const int AccUsdtPerShareFieldNumber = 6;
    private global::AElf.Types.BigIntValue accUsdtPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue AccUsdtPerShare {
      get { return accUsdtPerShare_; }
      set {
        accUsdtPerShare_ = value;
      }
    }

    /// <summary>Field number for the "total_amount" field.</summary>
    public const int TotalAmountFieldNumber = 7;
    private long totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    /// <summary>Field number for the "last_acc_lock_distribute_token_per_share" field.</summary>
    public const int LastAccLockDistributeTokenPerShareFieldNumber = 8;
    private global::AElf.Types.BigIntValue lastAccLockDistributeTokenPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue LastAccLockDistributeTokenPerShare {
      get { return lastAccLockDistributeTokenPerShare_; }
      set {
        lastAccLockDistributeTokenPerShare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LpToken != other.LpToken) return false;
      if (AllocPoint != other.AllocPoint) return false;
      if (LastRewardBlock != other.LastRewardBlock) return false;
      if (!object.Equals(AccDistributeTokenPerShare, other.AccDistributeTokenPerShare)) return false;
      if (!object.Equals(AccLockDistributeTokenPerShare, other.AccLockDistributeTokenPerShare)) return false;
      if (!object.Equals(AccUsdtPerShare, other.AccUsdtPerShare)) return false;
      if (TotalAmount != other.TotalAmount) return false;
      if (!object.Equals(LastAccLockDistributeTokenPerShare, other.LastAccLockDistributeTokenPerShare)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LpToken.Length != 0) hash ^= LpToken.GetHashCode();
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (LastRewardBlock != 0L) hash ^= LastRewardBlock.GetHashCode();
      if (accDistributeTokenPerShare_ != null) hash ^= AccDistributeTokenPerShare.GetHashCode();
      if (accLockDistributeTokenPerShare_ != null) hash ^= AccLockDistributeTokenPerShare.GetHashCode();
      if (accUsdtPerShare_ != null) hash ^= AccUsdtPerShare.GetHashCode();
      if (TotalAmount != 0L) hash ^= TotalAmount.GetHashCode();
      if (lastAccLockDistributeTokenPerShare_ != null) hash ^= LastAccLockDistributeTokenPerShare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LpToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LpToken);
      }
      if (AllocPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastRewardBlock);
      }
      if (accDistributeTokenPerShare_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AccDistributeTokenPerShare);
      }
      if (accLockDistributeTokenPerShare_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AccLockDistributeTokenPerShare);
      }
      if (accUsdtPerShare_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AccUsdtPerShare);
      }
      if (TotalAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalAmount);
      }
      if (lastAccLockDistributeTokenPerShare_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastAccLockDistributeTokenPerShare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LpToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LpToken);
      }
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlock);
      }
      if (accDistributeTokenPerShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccDistributeTokenPerShare);
      }
      if (accLockDistributeTokenPerShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccLockDistributeTokenPerShare);
      }
      if (accUsdtPerShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccUsdtPerShare);
      }
      if (TotalAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmount);
      }
      if (lastAccLockDistributeTokenPerShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastAccLockDistributeTokenPerShare);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolInfo other) {
      if (other == null) {
        return;
      }
      if (other.LpToken.Length != 0) {
        LpToken = other.LpToken;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.LastRewardBlock != 0L) {
        LastRewardBlock = other.LastRewardBlock;
      }
      if (other.accDistributeTokenPerShare_ != null) {
        if (accDistributeTokenPerShare_ == null) {
          AccDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
        }
        AccDistributeTokenPerShare.MergeFrom(other.AccDistributeTokenPerShare);
      }
      if (other.accLockDistributeTokenPerShare_ != null) {
        if (accLockDistributeTokenPerShare_ == null) {
          AccLockDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
        }
        AccLockDistributeTokenPerShare.MergeFrom(other.AccLockDistributeTokenPerShare);
      }
      if (other.accUsdtPerShare_ != null) {
        if (accUsdtPerShare_ == null) {
          AccUsdtPerShare = new global::AElf.Types.BigIntValue();
        }
        AccUsdtPerShare.MergeFrom(other.AccUsdtPerShare);
      }
      if (other.TotalAmount != 0L) {
        TotalAmount = other.TotalAmount;
      }
      if (other.lastAccLockDistributeTokenPerShare_ != null) {
        if (lastAccLockDistributeTokenPerShare_ == null) {
          LastAccLockDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
        }
        LastAccLockDistributeTokenPerShare.MergeFrom(other.LastAccLockDistributeTokenPerShare);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LpToken = input.ReadString();
            break;
          }
          case 16: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 24: {
            LastRewardBlock = input.ReadInt64();
            break;
          }
          case 34: {
            if (accDistributeTokenPerShare_ == null) {
              AccDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(AccDistributeTokenPerShare);
            break;
          }
          case 42: {
            if (accLockDistributeTokenPerShare_ == null) {
              AccLockDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(AccLockDistributeTokenPerShare);
            break;
          }
          case 50: {
            if (accUsdtPerShare_ == null) {
              AccUsdtPerShare = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(AccUsdtPerShare);
            break;
          }
          case 56: {
            TotalAmount = input.ReadInt64();
            break;
          }
          case 66: {
            if (lastAccLockDistributeTokenPerShare_ == null) {
              LastAccLockDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(LastAccLockDistributeTokenPerShare);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Event
  /// </summary>
  public sealed partial class Deposit : pb::IMessage<Deposit> {
    private static readonly pb::MessageParser<Deposit> _parser = new pb::MessageParser<Deposit>(() => new Deposit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deposit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit(Deposit other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit Clone() {
      return new Deposit(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deposit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deposit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deposit other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Withdraw : pb::IMessage<Withdraw> {
    private static readonly pb::MessageParser<Withdraw> _parser = new pb::MessageParser<Withdraw>(() => new Withdraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Withdraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw(Withdraw other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw Clone() {
      return new Withdraw(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Withdraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Withdraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Withdraw other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimRevenue : pb::IMessage<ClaimRevenue> {
    private static readonly pb::MessageParser<ClaimRevenue> _parser = new pb::MessageParser<ClaimRevenue>(() => new ClaimRevenue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimRevenue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRevenue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRevenue(ClaimRevenue other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      tokenType_ = other.tokenType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRevenue Clone() {
      return new ClaimRevenue(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "token_type" field.</summary>
    public const int TokenTypeFieldNumber = 4;
    private long tokenType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenType {
      get { return tokenType_; }
      set {
        tokenType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimRevenue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimRevenue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      if (TokenType != other.TokenType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (TokenType != 0L) hash ^= TokenType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (amount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Amount);
      }
      if (TokenType != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TokenType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (TokenType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimRevenue other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      if (other.TokenType != 0L) {
        TokenType = other.TokenType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
          case 32: {
            TokenType = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeightSet : pb::IMessage<WeightSet> {
    private static readonly pb::MessageParser<WeightSet> _parser = new pb::MessageParser<WeightSet>(() => new WeightSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeightSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightSet(WeightSet other) : this() {
      pid_ = other.pid_;
      newAllocationPoint_ = other.newAllocationPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightSet Clone() {
      return new WeightSet(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "new_allocation_point" field.</summary>
    public const int NewAllocationPointFieldNumber = 2;
    private long newAllocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewAllocationPoint {
      get { return newAllocationPoint_; }
      set {
        newAllocationPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeightSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeightSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (NewAllocationPoint != other.NewAllocationPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (NewAllocationPoint != 0L) hash ^= NewAllocationPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (NewAllocationPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NewAllocationPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (NewAllocationPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewAllocationPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeightSet other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.NewAllocationPoint != 0L) {
        NewAllocationPoint = other.NewAllocationPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            NewAllocationPoint = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolAdded : pb::IMessage<PoolAdded> {
    private static readonly pb::MessageParser<PoolAdded> _parser = new pb::MessageParser<PoolAdded>(() => new PoolAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolAdded(PoolAdded other) : this() {
      token_ = other.token_;
      pid_ = other.pid_;
      allocationPoint_ = other.allocationPoint_;
      lastRewardBlockHeight_ = other.lastRewardBlockHeight_;
      poolType_ = other.poolType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolAdded Clone() {
      return new PoolAdded(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "allocation_point" field.</summary>
    public const int AllocationPointFieldNumber = 3;
    private long allocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocationPoint {
      get { return allocationPoint_; }
      set {
        allocationPoint_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block_height" field.</summary>
    public const int LastRewardBlockHeightFieldNumber = 4;
    private long lastRewardBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlockHeight {
      get { return lastRewardBlockHeight_; }
      set {
        lastRewardBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "pool_type" field.</summary>
    public const int PoolTypeFieldNumber = 5;
    private long poolType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PoolType {
      get { return poolType_; }
      set {
        poolType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Pid != other.Pid) return false;
      if (AllocationPoint != other.AllocationPoint) return false;
      if (LastRewardBlockHeight != other.LastRewardBlockHeight) return false;
      if (PoolType != other.PoolType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (AllocationPoint != 0L) hash ^= AllocationPoint.GetHashCode();
      if (LastRewardBlockHeight != 0L) hash ^= LastRewardBlockHeight.GetHashCode();
      if (PoolType != 0L) hash ^= PoolType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (AllocationPoint != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AllocationPoint);
      }
      if (LastRewardBlockHeight != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastRewardBlockHeight);
      }
      if (PoolType != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PoolType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (AllocationPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocationPoint);
      }
      if (LastRewardBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlockHeight);
      }
      if (PoolType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PoolType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolAdded other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.AllocationPoint != 0L) {
        AllocationPoint = other.AllocationPoint;
      }
      if (other.LastRewardBlockHeight != 0L) {
        LastRewardBlockHeight = other.LastRewardBlockHeight;
      }
      if (other.PoolType != 0L) {
        PoolType = other.PoolType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 24: {
            AllocationPoint = input.ReadInt64();
            break;
          }
          case 32: {
            LastRewardBlockHeight = input.ReadInt64();
            break;
          }
          case 40: {
            PoolType = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DistributeTokenPerBlockSet : pb::IMessage<DistributeTokenPerBlockSet> {
    private static readonly pb::MessageParser<DistributeTokenPerBlockSet> _parser = new pb::MessageParser<DistributeTokenPerBlockSet>(() => new DistributeTokenPerBlockSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributeTokenPerBlockSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeTokenPerBlockSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeTokenPerBlockSet(DistributeTokenPerBlockSet other) : this() {
      newDistributeTokenPerBlock1_ = other.newDistributeTokenPerBlock1_;
      newDistributeTokenPerBlock2_ = other.newDistributeTokenPerBlock2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeTokenPerBlockSet Clone() {
      return new DistributeTokenPerBlockSet(this);
    }

    /// <summary>Field number for the "new_distribute_token_per_block1" field.</summary>
    public const int NewDistributeTokenPerBlock1FieldNumber = 1;
    private long newDistributeTokenPerBlock1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewDistributeTokenPerBlock1 {
      get { return newDistributeTokenPerBlock1_; }
      set {
        newDistributeTokenPerBlock1_ = value;
      }
    }

    /// <summary>Field number for the "new_distribute_token_per_block2" field.</summary>
    public const int NewDistributeTokenPerBlock2FieldNumber = 2;
    private long newDistributeTokenPerBlock2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewDistributeTokenPerBlock2 {
      get { return newDistributeTokenPerBlock2_; }
      set {
        newDistributeTokenPerBlock2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributeTokenPerBlockSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributeTokenPerBlockSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewDistributeTokenPerBlock1 != other.NewDistributeTokenPerBlock1) return false;
      if (NewDistributeTokenPerBlock2 != other.NewDistributeTokenPerBlock2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewDistributeTokenPerBlock1 != 0L) hash ^= NewDistributeTokenPerBlock1.GetHashCode();
      if (NewDistributeTokenPerBlock2 != 0L) hash ^= NewDistributeTokenPerBlock2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewDistributeTokenPerBlock1 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NewDistributeTokenPerBlock1);
      }
      if (NewDistributeTokenPerBlock2 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NewDistributeTokenPerBlock2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewDistributeTokenPerBlock1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewDistributeTokenPerBlock1);
      }
      if (NewDistributeTokenPerBlock2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewDistributeTokenPerBlock2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributeTokenPerBlockSet other) {
      if (other == null) {
        return;
      }
      if (other.NewDistributeTokenPerBlock1 != 0L) {
        NewDistributeTokenPerBlock1 = other.NewDistributeTokenPerBlock1;
      }
      if (other.NewDistributeTokenPerBlock2 != 0L) {
        NewDistributeTokenPerBlock2 = other.NewDistributeTokenPerBlock2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NewDistributeTokenPerBlock1 = input.ReadInt64();
            break;
          }
          case 16: {
            NewDistributeTokenPerBlock2 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HalvingPeriodSet : pb::IMessage<HalvingPeriodSet> {
    private static readonly pb::MessageParser<HalvingPeriodSet> _parser = new pb::MessageParser<HalvingPeriodSet>(() => new HalvingPeriodSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HalvingPeriodSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HalvingPeriodSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HalvingPeriodSet(HalvingPeriodSet other) : this() {
      period1_ = other.period1_;
      period2_ = other.period2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HalvingPeriodSet Clone() {
      return new HalvingPeriodSet(this);
    }

    /// <summary>Field number for the "period1" field.</summary>
    public const int Period1FieldNumber = 1;
    private long period1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period1 {
      get { return period1_; }
      set {
        period1_ = value;
      }
    }

    /// <summary>Field number for the "period2" field.</summary>
    public const int Period2FieldNumber = 2;
    private long period2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period2 {
      get { return period2_; }
      set {
        period2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HalvingPeriodSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HalvingPeriodSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period1 != other.Period1) return false;
      if (Period2 != other.Period2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period1 != 0L) hash ^= Period1.GetHashCode();
      if (Period2 != 0L) hash ^= Period2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period1 != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Period1);
      }
      if (Period2 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Period2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period1);
      }
      if (Period2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HalvingPeriodSet other) {
      if (other == null) {
        return;
      }
      if (other.Period1 != 0L) {
        Period1 = other.Period1;
      }
      if (other.Period2 != 0L) {
        Period2 = other.Period2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period1 = input.ReadInt64();
            break;
          }
          case 16: {
            Period2 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewRewardSet : pb::IMessage<NewRewardSet> {
    private static readonly pb::MessageParser<NewRewardSet> _parser = new pb::MessageParser<NewRewardSet>(() => new NewRewardSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewRewardSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardSet(NewRewardSet other) : this() {
      startBlock_ = other.startBlock_;
      endBlock_ = other.endBlock_;
      usdtPerBlock_ = other.usdtPerBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewRewardSet Clone() {
      return new NewRewardSet(this);
    }

    /// <summary>Field number for the "start_block" field.</summary>
    public const int StartBlockFieldNumber = 1;
    private long startBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartBlock {
      get { return startBlock_; }
      set {
        startBlock_ = value;
      }
    }

    /// <summary>Field number for the "end_block" field.</summary>
    public const int EndBlockFieldNumber = 2;
    private long endBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndBlock {
      get { return endBlock_; }
      set {
        endBlock_ = value;
      }
    }

    /// <summary>Field number for the "usdt_per_block" field.</summary>
    public const int UsdtPerBlockFieldNumber = 3;
    private long usdtPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsdtPerBlock {
      get { return usdtPerBlock_; }
      set {
        usdtPerBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewRewardSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewRewardSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartBlock != other.StartBlock) return false;
      if (EndBlock != other.EndBlock) return false;
      if (UsdtPerBlock != other.UsdtPerBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartBlock != 0L) hash ^= StartBlock.GetHashCode();
      if (EndBlock != 0L) hash ^= EndBlock.GetHashCode();
      if (UsdtPerBlock != 0L) hash ^= UsdtPerBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartBlock != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartBlock);
      }
      if (EndBlock != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndBlock);
      }
      if (UsdtPerBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UsdtPerBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartBlock);
      }
      if (EndBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndBlock);
      }
      if (UsdtPerBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsdtPerBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewRewardSet other) {
      if (other == null) {
        return;
      }
      if (other.StartBlock != 0L) {
        StartBlock = other.StartBlock;
      }
      if (other.EndBlock != 0L) {
        EndBlock = other.EndBlock;
      }
      if (other.UsdtPerBlock != 0L) {
        UsdtPerBlock = other.UsdtPerBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartBlock = input.ReadInt64();
            break;
          }
          case 16: {
            EndBlock = input.ReadInt64();
            break;
          }
          case 24: {
            UsdtPerBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePool : pb::IMessage<UpdatePool> {
    private static readonly pb::MessageParser<UpdatePool> _parser = new pb::MessageParser<UpdatePool>(() => new UpdatePool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.Farm.FarmContractReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool(UpdatePool other) : this() {
      pid_ = other.pid_;
      distributeTokenAmount_ = other.distributeTokenAmount_;
      usdtAmount_ = other.usdtAmount_;
      updateBlockHeight_ = other.updateBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool Clone() {
      return new UpdatePool(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_amount" field.</summary>
    public const int DistributeTokenAmountFieldNumber = 2;
    private long distributeTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistributeTokenAmount {
      get { return distributeTokenAmount_; }
      set {
        distributeTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "usdt_amount" field.</summary>
    public const int UsdtAmountFieldNumber = 3;
    private long usdtAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsdtAmount {
      get { return usdtAmount_; }
      set {
        usdtAmount_ = value;
      }
    }

    /// <summary>Field number for the "update_block_height" field.</summary>
    public const int UpdateBlockHeightFieldNumber = 4;
    private long updateBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateBlockHeight {
      get { return updateBlockHeight_; }
      set {
        updateBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (DistributeTokenAmount != other.DistributeTokenAmount) return false;
      if (UsdtAmount != other.UsdtAmount) return false;
      if (UpdateBlockHeight != other.UpdateBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (DistributeTokenAmount != 0L) hash ^= DistributeTokenAmount.GetHashCode();
      if (UsdtAmount != 0L) hash ^= UsdtAmount.GetHashCode();
      if (UpdateBlockHeight != 0L) hash ^= UpdateBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (DistributeTokenAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DistributeTokenAmount);
      }
      if (UsdtAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UsdtAmount);
      }
      if (UpdateBlockHeight != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UpdateBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (DistributeTokenAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistributeTokenAmount);
      }
      if (UsdtAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsdtAmount);
      }
      if (UpdateBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePool other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.DistributeTokenAmount != 0L) {
        DistributeTokenAmount = other.DistributeTokenAmount;
      }
      if (other.UsdtAmount != 0L) {
        UsdtAmount = other.UsdtAmount;
      }
      if (other.UpdateBlockHeight != 0L) {
        UpdateBlockHeight = other.UpdateBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            DistributeTokenAmount = input.ReadInt64();
            break;
          }
          case 24: {
            UsdtAmount = input.ReadInt64();
            break;
          }
          case 32: {
            UpdateBlockHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
