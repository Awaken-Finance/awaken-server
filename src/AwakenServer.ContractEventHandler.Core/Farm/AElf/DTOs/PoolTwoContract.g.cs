// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: pool_two_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Awaken.Contracts.PoolTwoContract {

  /// <summary>Holder for reflection information generated from pool_two_contract.proto</summary>
  public static partial class PoolTwoContractReflection {

    #region Descriptor
    /// <summary>File descriptor for pool_two_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PoolTwoContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chdwb29sX3R3b19jb250cmFjdC5wcm90bxoPYWVsZi9jb3JlLnByb3RvGhJh",
            "ZWxmL29wdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90",
            "bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvIk4KFlNldExwVG9r",
            "ZW5BZGRyZXNzSW5wdXQSNAodYXdha2VuX3Rva2VuX2NvbnRyYWN0X2FkZHJl",
            "c3MYASABKAsyDS5hZWxmLkFkZHJlc3MiOQoNVXNlckluZm9JbnB1dBILCgNw",
            "aWQYASABKAUSGwoEdXNlchgCIAEoCzINLmFlbGYuQWRkcmVzcyI/Cg1XaXRo",
            "ZHJhd0lucHV0EgsKA3BpZBgBIAEoBRIhCgZhbW91bnQYAiABKAsyES5hZWxm",
            "LkJpZ0ludFZhbHVlIj4KDERlcG9zaXRJbnB1dBILCgNwaWQYASABKAUSIQoG",
            "YW1vdW50GAIgASgLMhEuYWVsZi5CaWdJbnRWYWx1ZSJQCg5SZURlcG9zaXRJ",
            "bnB1dBIhCgZhbW91bnQYASABKAsyES5hZWxmLkJpZ0ludFZhbHVlEhsKBHVz",
            "ZXIYAiABKAsyDS5hZWxmLkFkZHJlc3MiOAoMUGVuZGluZ0lucHV0EgsKA3Bp",
            "ZBgBIAEoBRIbCgR1c2VyGAIgASgLMg0uYWVsZi5BZGRyZXNzImsKCFNldElu",
            "cHV0EgsKA3BpZBgBIAEoBRITCgthbGxvY19wb2ludBgCIAEoAxIoCg1uZXdf",
            "cGVyX2Jsb2NrGAMgASgLMhEuYWVsZi5CaWdJbnRWYWx1ZRITCgt3aXRoX3Vw",
            "ZGF0ZRgEIAEoCCJGCghBZGRJbnB1dBITCgthbGxvY19wb2ludBgBIAEoAxIQ",
            "CghscF90b2tlbhgCIAEoCRITCgt3aXRoX3VwZGF0ZRgDIAEoCCKjAgoPSW5p",
            "dGlhbGl6ZUlucHV0EhgKEGRpc3RyaWJ1dGVfdG9rZW4YASABKAkSNQoaZGlz",
            "dHJpYnV0ZV9Ub2tlbl9QZXJfQmxvY2sYAiABKAsyES5hZWxmLkJpZ0ludFZh",
            "bHVlEhYKDmhhbHZpbmdfcGVyaW9kGAMgASgDEhMKC3N0YXJ0X2Jsb2NrGAQg",
            "ASgDEicKDHRvdGFsX3Jld2FyZBgFIAEoCzIRLmFlbGYuQmlnSW50VmFsdWUS",
            "HAoFYWRtaW4YBiABKAsyDS5hZWxmLkFkZHJlc3MSLAoVYXdha2VuX3Rva2Vu",
            "X2NvbnRyYWN0GAcgASgLMg0uYWVsZi5BZGRyZXNzEh0KFXJlZGVwb3NpdF9z",
            "dGFydF9ibG9jaxgIIAEoAyJbCg5Vc2VySW5mb1N0cnVjdBIhCgZhbW91bnQY",
            "ASABKAsyES5hZWxmLkJpZ0ludFZhbHVlEiYKC3Jld2FyZF9kZWJ0GAIgASgL",
            "MhEuYWVsZi5CaWdJbnRWYWx1ZSK1AQoOUG9vbEluZm9TdHJ1Y3QSEAoIbHBf",
            "dG9rZW4YASABKAkSEwoLYWxsb2NfcG9pbnQYAiABKAMSGQoRbGFzdF9yZXdh",
            "cmRfYmxvY2sYAyABKAMSOQoeYWNjX2Rpc3RyaWJ1dGVfdG9rZW5fcGVyX3No",
            "YXJlGAQgASgLMhEuYWVsZi5CaWdJbnRWYWx1ZRImCgt0b3RhbEFtb3VudBgF",
            "IAEoCzIRLmFlbGYuQmlnSW50VmFsdWUiLgoIUG9vbEluZm8SIgoJcG9vbF9s",
            "aXN0GAEgAygLMg8uUG9vbEluZm9TdHJ1Y3QiVwoHRGVwb3NpdBIiCgR1c2Vy",
            "GAEgASgLMg0uYWVsZi5BZGRyZXNzQgWIj/UBARISCgNwaWQYAiABKANCBYiP",
            "9QEBEg4KBmFtb3VudBgDIAEoAzoEoLsYASJYCghXaXRoZHJhdxIiCgR1c2Vy",
            "GAEgASgLMg0uYWVsZi5BZGRyZXNzQgWIj/UBARISCgNwaWQYAiABKANCBYiP",
            "9QEBEg4KBmFtb3VudBgDIAEoAzoEoLsYASKLAQoMQ2xhaW1SZXZlbnVlEhsK",
            "BHVzZXIYASABKAsyDS5hZWxmLkFkZHJlc3MSCwoDcGlkGAIgASgFEhQKDHRv",
            "a2VuX3N5bWJvbBgDIAEoCRISCgp0b2tlbl90eXBlGAQgASgDEiEKBmFtb3Vu",
            "dBgFIAEoCzIRLmFlbGYuQmlnSW50VmFsdWU6BKC7GAEiPAoJV2VpZ2h0U2V0",
            "EgsKA3BpZBgBIAEoAxIcChRuZXdfYWxsb2NhdGlvbl9wb2ludBgCIAEoAzoE",
            "oLsYASJ8CglQb29sQWRkZWQSDQoFdG9rZW4YASABKAkSCwoDcGlkGAIgASgD",
            "EhgKEGFsbG9jYXRpb25fcG9pbnQYAyABKAMSIAoYbGFzdF9yZXdhcmRfYmxv",
            "Y2tfaGVpZ2h0GAQgASgDEhEKCXBvb2xfdHlwZRgFIAEoAzoEoLsYASJdChpE",
            "aXN0cmlidXRlVG9rZW5QZXJCbG9ja1NldBI5Ch5uZXdfZGlzdHJpYnV0ZV90",
            "b2tlbl9wZXJfYmxvY2sYASABKAsyES5hZWxmLkJpZ0ludFZhbHVlOgSguxgB",
            "IigKEEhhbHZpbmdQZXJpb2RTZXQSDgoGcGVyaW9kGAEgASgDOgSguxgBInAK",
            "ClVwZGF0ZVBvb2wSCwoDcGlkGAEgASgFEjIKF2Rpc3RyaWJ1dGVfdG9rZW5f",
            "YW1vdW50GAIgASgLMhEuYWVsZi5CaWdJbnRWYWx1ZRIbChN1cGRhdGVfYmxv",
            "Y2tfaGVpZ2h0GAMgASgDOgSguxgBMsIRCg9Qb29sVHdvQ29udHJhY3QSOAoK",
            "SW5pdGlhbGl6ZRIQLkluaXRpYWxpemVJbnB1dBoWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eSIAEkkKEFNldEhhbHZpbmdQZXJpb2QSGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjkKDlNl",
            "dEZhcm1Qb29sT25lEg0uYWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASUwoaU2V0RGlzdHJpYnV0ZVRva2VuUGVyQmxvY2sSGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEioKA0FkZBIJLkFkZElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASKgoDU2V0EgkuU2V0SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHki",
            "ABJDCg9NYXNzVXBkYXRlUG9vbHMSFi5nb29nbGUucHJvdG9idWYuRW1wdHka",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJDCgpVcGRhdGVQb29sEhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABI2CglSZURlcG9zaXQSDy5SZURlcG9zaXRJbnB1dBoWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eSIAEjIKB0RlcG9zaXQSDS5EZXBvc2l0SW5wdXQaFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkiABI0CghXaXRoZHJhdxIOLldpdGhkcmF3",
            "SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJDCgtGaXhFbmRCbG9j",
            "axIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiABJGChFTZXRMcFRva2VuQWRkcmVzcxIXLlNldExwVG9rZW5B",
            "ZGRyZXNzSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIzCghTZXRP",
            "d25lchINLmFlbGYuQWRkcmVzcxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EjMKCFNldEFkbWluEg0uYWVsZi5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASSAoKUG9vbExlbmd0aBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eRobLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJICgVQaGFz",
            "ZRIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWUiBYiJ9wEBEj8KBlJld2FyZBIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQ2NFZhbHVlGhEuYWVsZi5CaWdJbnRWYWx1ZSIFiIn3AQESVgod",
            "R2V0RGlzdHJpYnV0ZVRva2VuQmxvY2tSZXdhcmQSGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZRoRLmFlbGYuQmlnSW50VmFsdWUiBYiJ9wEBEjIKB1Bl",
            "bmRpbmcSDS5QZW5kaW5nSW5wdXQaES5hZWxmLkJpZ0ludFZhbHVlIgWIifcB",
            "ARIyCghVc2VySW5mbxIOLlVzZXJJbmZvSW5wdXQaDy5Vc2VySW5mb1N0cnVj",
            "dCIFiIn3AQESSAoKU3RhcnRCbG9jaxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eRobLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJOCg9EaXN0",
            "cmlidXRlVG9rZW4SFi5nb29nbGUucHJvdG9idWYuRW1wdHkaHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUiBYiJ9wEBEj8KCFBvb2xJbmZvEhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDMyVmFsdWUaDy5Qb29sSW5mb1N0cnVjdCIFiIn3",
            "AQESTQoPVG90YWxBbGxvY1BvaW50EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "GhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBEksKDUhhbHZp",
            "bmdQZXJpb2QSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZSIFiIn3AQESOwoLRmFybVBvb2xPbmUSFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkaDS5hZWxmLkFkZHJlc3MiBYiJ9wEBEj8KC1Rv",
            "dGFsUmV3YXJkEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhEuYWVsZi5CaWdJ",
            "bnRWYWx1ZSIFiIn3AQESQAoMSXNzdWVkUmV3YXJkEhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5GhEuYWVsZi5CaWdJbnRWYWx1ZSIFiIn3AQESRgoIRW5kQmxv",
            "Y2sSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZSIFiIn3AQESSwoXRGlzdHJpYnV0ZVRva2VuUGVyQmxvY2sS",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaES5hZWxmLkJpZ0ludFZhbHVlIgWI",
            "ifcBARJQChNSZWRlcG9zaXRBZGp1c3RGbGFnEhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5GhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZSIFiIn3AQESUQoT",
            "UmVkZXBvc2l0U3RhcnRCbG9jaxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRob",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARoZssz2ARRQb29s",
            "VHdvQ29udHJhY3RTdGF0ZUIjqgIgQXdha2VuLkNvbnRyYWN0cy5Qb29sVHdv",
            "Q29udHJhY3RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.SetLpTokenAddressInput), global::Awaken.Contracts.PoolTwoContract.SetLpTokenAddressInput.Parser, new[]{ "AwakenTokenContractAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.UserInfoInput), global::Awaken.Contracts.PoolTwoContract.UserInfoInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.WithdrawInput), global::Awaken.Contracts.PoolTwoContract.WithdrawInput.Parser, new[]{ "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.DepositInput), global::Awaken.Contracts.PoolTwoContract.DepositInput.Parser, new[]{ "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.ReDepositInput), global::Awaken.Contracts.PoolTwoContract.ReDepositInput.Parser, new[]{ "Amount", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.PendingInput), global::Awaken.Contracts.PoolTwoContract.PendingInput.Parser, new[]{ "Pid", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.SetInput), global::Awaken.Contracts.PoolTwoContract.SetInput.Parser, new[]{ "Pid", "AllocPoint", "NewPerBlock", "WithUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.AddInput), global::Awaken.Contracts.PoolTwoContract.AddInput.Parser, new[]{ "AllocPoint", "LpToken", "WithUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.InitializeInput), global::Awaken.Contracts.PoolTwoContract.InitializeInput.Parser, new[]{ "DistributeToken", "DistributeTokenPerBlock", "HalvingPeriod", "StartBlock", "TotalReward", "Admin", "AwakenTokenContract", "RedepositStartBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.UserInfoStruct), global::Awaken.Contracts.PoolTwoContract.UserInfoStruct.Parser, new[]{ "Amount", "RewardDebt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct), global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct.Parser, new[]{ "LpToken", "AllocPoint", "LastRewardBlock", "AccDistributeTokenPerShare", "TotalAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.PoolInfo), global::Awaken.Contracts.PoolTwoContract.PoolInfo.Parser, new[]{ "PoolList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.Deposit), global::Awaken.Contracts.PoolTwoContract.Deposit.Parser, new[]{ "User", "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.Withdraw), global::Awaken.Contracts.PoolTwoContract.Withdraw.Parser, new[]{ "User", "Pid", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.ClaimRevenue), global::Awaken.Contracts.PoolTwoContract.ClaimRevenue.Parser, new[]{ "User", "Pid", "TokenSymbol", "TokenType", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.WeightSet), global::Awaken.Contracts.PoolTwoContract.WeightSet.Parser, new[]{ "Pid", "NewAllocationPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.PoolAdded), global::Awaken.Contracts.PoolTwoContract.PoolAdded.Parser, new[]{ "Token", "Pid", "AllocationPoint", "LastRewardBlockHeight", "PoolType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.DistributeTokenPerBlockSet), global::Awaken.Contracts.PoolTwoContract.DistributeTokenPerBlockSet.Parser, new[]{ "NewDistributeTokenPerBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.HalvingPeriodSet), global::Awaken.Contracts.PoolTwoContract.HalvingPeriodSet.Parser, new[]{ "Period" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Awaken.Contracts.PoolTwoContract.UpdatePool), global::Awaken.Contracts.PoolTwoContract.UpdatePool.Parser, new[]{ "Pid", "DistributeTokenAmount", "UpdateBlockHeight" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Input&amp;Output
  /// </summary>
  public sealed partial class SetLpTokenAddressInput : pb::IMessage<SetLpTokenAddressInput> {
    private static readonly pb::MessageParser<SetLpTokenAddressInput> _parser = new pb::MessageParser<SetLpTokenAddressInput>(() => new SetLpTokenAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetLpTokenAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLpTokenAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLpTokenAddressInput(SetLpTokenAddressInput other) : this() {
      awakenTokenContractAddress_ = other.awakenTokenContractAddress_ != null ? other.awakenTokenContractAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLpTokenAddressInput Clone() {
      return new SetLpTokenAddressInput(this);
    }

    /// <summary>Field number for the "awaken_token_contract_address" field.</summary>
    public const int AwakenTokenContractAddressFieldNumber = 1;
    private global::AElf.Types.Address awakenTokenContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AwakenTokenContractAddress {
      get { return awakenTokenContractAddress_; }
      set {
        awakenTokenContractAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetLpTokenAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetLpTokenAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AwakenTokenContractAddress, other.AwakenTokenContractAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (awakenTokenContractAddress_ != null) hash ^= AwakenTokenContractAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (awakenTokenContractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AwakenTokenContractAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (awakenTokenContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwakenTokenContractAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetLpTokenAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.awakenTokenContractAddress_ != null) {
        if (awakenTokenContractAddress_ == null) {
          AwakenTokenContractAddress = new global::AElf.Types.Address();
        }
        AwakenTokenContractAddress.MergeFrom(other.AwakenTokenContractAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (awakenTokenContractAddress_ == null) {
              AwakenTokenContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AwakenTokenContractAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfoInput : pb::IMessage<UserInfoInput> {
    private static readonly pb::MessageParser<UserInfoInput> _parser = new pb::MessageParser<UserInfoInput>(() => new UserInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput(UserInfoInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoInput Clone() {
      return new UserInfoInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WithdrawInput : pb::IMessage<WithdrawInput> {
    private static readonly pb::MessageParser<WithdrawInput> _parser = new pb::MessageParser<WithdrawInput>(() => new WithdrawInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WithdrawInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput(WithdrawInput other) : this() {
      pid_ = other.pid_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WithdrawInput Clone() {
      return new WithdrawInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WithdrawInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WithdrawInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (amount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WithdrawInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DepositInput : pb::IMessage<DepositInput> {
    private static readonly pb::MessageParser<DepositInput> _parser = new pb::MessageParser<DepositInput>(() => new DepositInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DepositInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput(DepositInput other) : this() {
      pid_ = other.pid_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DepositInput Clone() {
      return new DepositInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DepositInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DepositInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (amount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DepositInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReDepositInput : pb::IMessage<ReDepositInput> {
    private static readonly pb::MessageParser<ReDepositInput> _parser = new pb::MessageParser<ReDepositInput>(() => new ReDepositInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReDepositInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReDepositInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReDepositInput(ReDepositInput other) : this() {
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReDepositInput Clone() {
      return new ReDepositInput(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReDepositInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReDepositInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Amount, other.Amount)) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReDepositInput other) {
      if (other == null) {
        return;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingInput : pb::IMessage<PendingInput> {
    private static readonly pb::MessageParser<PendingInput> _parser = new pb::MessageParser<PendingInput>(() => new PendingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput(PendingInput other) : this() {
      pid_ = other.pid_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingInput Clone() {
      return new PendingInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetInput : pb::IMessage<SetInput> {
    private static readonly pb::MessageParser<SetInput> _parser = new pb::MessageParser<SetInput>(() => new SetInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetInput(SetInput other) : this() {
      pid_ = other.pid_;
      allocPoint_ = other.allocPoint_;
      newPerBlock_ = other.newPerBlock_ != null ? other.newPerBlock_.Clone() : null;
      withUpdate_ = other.withUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetInput Clone() {
      return new SetInput(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 2;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "new_per_block" field.</summary>
    public const int NewPerBlockFieldNumber = 3;
    private global::AElf.Types.BigIntValue newPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue NewPerBlock {
      get { return newPerBlock_; }
      set {
        newPerBlock_ = value;
      }
    }

    /// <summary>Field number for the "with_update" field.</summary>
    public const int WithUpdateFieldNumber = 4;
    private bool withUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithUpdate {
      get { return withUpdate_; }
      set {
        withUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (AllocPoint != other.AllocPoint) return false;
      if (!object.Equals(NewPerBlock, other.NewPerBlock)) return false;
      if (WithUpdate != other.WithUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (newPerBlock_ != null) hash ^= NewPerBlock.GetHashCode();
      if (WithUpdate != false) hash ^= WithUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (AllocPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocPoint);
      }
      if (newPerBlock_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewPerBlock);
      }
      if (WithUpdate != false) {
        output.WriteRawTag(32);
        output.WriteBool(WithUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (newPerBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPerBlock);
      }
      if (WithUpdate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetInput other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.newPerBlock_ != null) {
        if (newPerBlock_ == null) {
          NewPerBlock = new global::AElf.Types.BigIntValue();
        }
        NewPerBlock.MergeFrom(other.NewPerBlock);
      }
      if (other.WithUpdate != false) {
        WithUpdate = other.WithUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 26: {
            if (newPerBlock_ == null) {
              NewPerBlock = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(NewPerBlock);
            break;
          }
          case 32: {
            WithUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddInput : pb::IMessage<AddInput> {
    private static readonly pb::MessageParser<AddInput> _parser = new pb::MessageParser<AddInput>(() => new AddInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInput(AddInput other) : this() {
      allocPoint_ = other.allocPoint_;
      lpToken_ = other.lpToken_;
      withUpdate_ = other.withUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInput Clone() {
      return new AddInput(this);
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 1;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "lp_token" field.</summary>
    public const int LpTokenFieldNumber = 2;
    private string lpToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LpToken {
      get { return lpToken_; }
      set {
        lpToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "with_update" field.</summary>
    public const int WithUpdateFieldNumber = 3;
    private bool withUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithUpdate {
      get { return withUpdate_; }
      set {
        withUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllocPoint != other.AllocPoint) return false;
      if (LpToken != other.LpToken) return false;
      if (WithUpdate != other.WithUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (LpToken.Length != 0) hash ^= LpToken.GetHashCode();
      if (WithUpdate != false) hash ^= WithUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllocPoint != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AllocPoint);
      }
      if (LpToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LpToken);
      }
      if (WithUpdate != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (LpToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LpToken);
      }
      if (WithUpdate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddInput other) {
      if (other == null) {
        return;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.LpToken.Length != 0) {
        LpToken = other.LpToken;
      }
      if (other.WithUpdate != false) {
        WithUpdate = other.WithUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 18: {
            LpToken = input.ReadString();
            break;
          }
          case 24: {
            WithUpdate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      distributeToken_ = other.distributeToken_;
      distributeTokenPerBlock_ = other.distributeTokenPerBlock_ != null ? other.distributeTokenPerBlock_.Clone() : null;
      halvingPeriod_ = other.halvingPeriod_;
      startBlock_ = other.startBlock_;
      totalReward_ = other.totalReward_ != null ? other.totalReward_.Clone() : null;
      admin_ = other.admin_ != null ? other.admin_.Clone() : null;
      awakenTokenContract_ = other.awakenTokenContract_ != null ? other.awakenTokenContract_.Clone() : null;
      redepositStartBlock_ = other.redepositStartBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "distribute_token" field.</summary>
    public const int DistributeTokenFieldNumber = 1;
    private string distributeToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DistributeToken {
      get { return distributeToken_; }
      set {
        distributeToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distribute_Token_Per_Block" field.</summary>
    public const int DistributeTokenPerBlockFieldNumber = 2;
    private global::AElf.Types.BigIntValue distributeTokenPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue DistributeTokenPerBlock {
      get { return distributeTokenPerBlock_; }
      set {
        distributeTokenPerBlock_ = value;
      }
    }

    /// <summary>Field number for the "halving_period" field.</summary>
    public const int HalvingPeriodFieldNumber = 3;
    private long halvingPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HalvingPeriod {
      get { return halvingPeriod_; }
      set {
        halvingPeriod_ = value;
      }
    }

    /// <summary>Field number for the "start_block" field.</summary>
    public const int StartBlockFieldNumber = 4;
    private long startBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartBlock {
      get { return startBlock_; }
      set {
        startBlock_ = value;
      }
    }

    /// <summary>Field number for the "total_reward" field.</summary>
    public const int TotalRewardFieldNumber = 5;
    private global::AElf.Types.BigIntValue totalReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue TotalReward {
      get { return totalReward_; }
      set {
        totalReward_ = value;
      }
    }

    /// <summary>Field number for the "admin" field.</summary>
    public const int AdminFieldNumber = 6;
    private global::AElf.Types.Address admin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Admin {
      get { return admin_; }
      set {
        admin_ = value;
      }
    }

    /// <summary>Field number for the "awaken_token_contract" field.</summary>
    public const int AwakenTokenContractFieldNumber = 7;
    private global::AElf.Types.Address awakenTokenContract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AwakenTokenContract {
      get { return awakenTokenContract_; }
      set {
        awakenTokenContract_ = value;
      }
    }

    /// <summary>Field number for the "redeposit_start_block" field.</summary>
    public const int RedepositStartBlockFieldNumber = 8;
    private long redepositStartBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RedepositStartBlock {
      get { return redepositStartBlock_; }
      set {
        redepositStartBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistributeToken != other.DistributeToken) return false;
      if (!object.Equals(DistributeTokenPerBlock, other.DistributeTokenPerBlock)) return false;
      if (HalvingPeriod != other.HalvingPeriod) return false;
      if (StartBlock != other.StartBlock) return false;
      if (!object.Equals(TotalReward, other.TotalReward)) return false;
      if (!object.Equals(Admin, other.Admin)) return false;
      if (!object.Equals(AwakenTokenContract, other.AwakenTokenContract)) return false;
      if (RedepositStartBlock != other.RedepositStartBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistributeToken.Length != 0) hash ^= DistributeToken.GetHashCode();
      if (distributeTokenPerBlock_ != null) hash ^= DistributeTokenPerBlock.GetHashCode();
      if (HalvingPeriod != 0L) hash ^= HalvingPeriod.GetHashCode();
      if (StartBlock != 0L) hash ^= StartBlock.GetHashCode();
      if (totalReward_ != null) hash ^= TotalReward.GetHashCode();
      if (admin_ != null) hash ^= Admin.GetHashCode();
      if (awakenTokenContract_ != null) hash ^= AwakenTokenContract.GetHashCode();
      if (RedepositStartBlock != 0L) hash ^= RedepositStartBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistributeToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DistributeToken);
      }
      if (distributeTokenPerBlock_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DistributeTokenPerBlock);
      }
      if (HalvingPeriod != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HalvingPeriod);
      }
      if (StartBlock != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartBlock);
      }
      if (totalReward_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TotalReward);
      }
      if (admin_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Admin);
      }
      if (awakenTokenContract_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AwakenTokenContract);
      }
      if (RedepositStartBlock != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(RedepositStartBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistributeToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DistributeToken);
      }
      if (distributeTokenPerBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributeTokenPerBlock);
      }
      if (HalvingPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HalvingPeriod);
      }
      if (StartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartBlock);
      }
      if (totalReward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalReward);
      }
      if (admin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Admin);
      }
      if (awakenTokenContract_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwakenTokenContract);
      }
      if (RedepositStartBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RedepositStartBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.DistributeToken.Length != 0) {
        DistributeToken = other.DistributeToken;
      }
      if (other.distributeTokenPerBlock_ != null) {
        if (distributeTokenPerBlock_ == null) {
          DistributeTokenPerBlock = new global::AElf.Types.BigIntValue();
        }
        DistributeTokenPerBlock.MergeFrom(other.DistributeTokenPerBlock);
      }
      if (other.HalvingPeriod != 0L) {
        HalvingPeriod = other.HalvingPeriod;
      }
      if (other.StartBlock != 0L) {
        StartBlock = other.StartBlock;
      }
      if (other.totalReward_ != null) {
        if (totalReward_ == null) {
          TotalReward = new global::AElf.Types.BigIntValue();
        }
        TotalReward.MergeFrom(other.TotalReward);
      }
      if (other.admin_ != null) {
        if (admin_ == null) {
          Admin = new global::AElf.Types.Address();
        }
        Admin.MergeFrom(other.Admin);
      }
      if (other.awakenTokenContract_ != null) {
        if (awakenTokenContract_ == null) {
          AwakenTokenContract = new global::AElf.Types.Address();
        }
        AwakenTokenContract.MergeFrom(other.AwakenTokenContract);
      }
      if (other.RedepositStartBlock != 0L) {
        RedepositStartBlock = other.RedepositStartBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DistributeToken = input.ReadString();
            break;
          }
          case 18: {
            if (distributeTokenPerBlock_ == null) {
              DistributeTokenPerBlock = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(DistributeTokenPerBlock);
            break;
          }
          case 24: {
            HalvingPeriod = input.ReadInt64();
            break;
          }
          case 32: {
            StartBlock = input.ReadInt64();
            break;
          }
          case 42: {
            if (totalReward_ == null) {
              TotalReward = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(TotalReward);
            break;
          }
          case 50: {
            if (admin_ == null) {
              Admin = new global::AElf.Types.Address();
            }
            input.ReadMessage(Admin);
            break;
          }
          case 58: {
            if (awakenTokenContract_ == null) {
              AwakenTokenContract = new global::AElf.Types.Address();
            }
            input.ReadMessage(AwakenTokenContract);
            break;
          }
          case 64: {
            RedepositStartBlock = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Struct
  /// </summary>
  public sealed partial class UserInfoStruct : pb::IMessage<UserInfoStruct> {
    private static readonly pb::MessageParser<UserInfoStruct> _parser = new pb::MessageParser<UserInfoStruct>(() => new UserInfoStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfoStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoStruct(UserInfoStruct other) : this() {
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      rewardDebt_ = other.rewardDebt_ != null ? other.rewardDebt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfoStruct Clone() {
      return new UserInfoStruct(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "reward_debt" field.</summary>
    public const int RewardDebtFieldNumber = 2;
    private global::AElf.Types.BigIntValue rewardDebt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue RewardDebt {
      get { return rewardDebt_; }
      set {
        rewardDebt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfoStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfoStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Amount, other.Amount)) return false;
      if (!object.Equals(RewardDebt, other.RewardDebt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (rewardDebt_ != null) hash ^= RewardDebt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (amount_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Amount);
      }
      if (rewardDebt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RewardDebt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (rewardDebt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardDebt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfoStruct other) {
      if (other == null) {
        return;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      if (other.rewardDebt_ != null) {
        if (rewardDebt_ == null) {
          RewardDebt = new global::AElf.Types.BigIntValue();
        }
        RewardDebt.MergeFrom(other.RewardDebt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
          case 18: {
            if (rewardDebt_ == null) {
              RewardDebt = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(RewardDebt);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolInfoStruct : pb::IMessage<PoolInfoStruct> {
    private static readonly pb::MessageParser<PoolInfoStruct> _parser = new pb::MessageParser<PoolInfoStruct>(() => new PoolInfoStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolInfoStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfoStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfoStruct(PoolInfoStruct other) : this() {
      lpToken_ = other.lpToken_;
      allocPoint_ = other.allocPoint_;
      lastRewardBlock_ = other.lastRewardBlock_;
      accDistributeTokenPerShare_ = other.accDistributeTokenPerShare_ != null ? other.accDistributeTokenPerShare_.Clone() : null;
      totalAmount_ = other.totalAmount_ != null ? other.totalAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfoStruct Clone() {
      return new PoolInfoStruct(this);
    }

    /// <summary>Field number for the "lp_token" field.</summary>
    public const int LpTokenFieldNumber = 1;
    private string lpToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LpToken {
      get { return lpToken_; }
      set {
        lpToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alloc_point" field.</summary>
    public const int AllocPointFieldNumber = 2;
    private long allocPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocPoint {
      get { return allocPoint_; }
      set {
        allocPoint_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block" field.</summary>
    public const int LastRewardBlockFieldNumber = 3;
    private long lastRewardBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlock {
      get { return lastRewardBlock_; }
      set {
        lastRewardBlock_ = value;
      }
    }

    /// <summary>Field number for the "acc_distribute_token_per_share" field.</summary>
    public const int AccDistributeTokenPerShareFieldNumber = 4;
    private global::AElf.Types.BigIntValue accDistributeTokenPerShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue AccDistributeTokenPerShare {
      get { return accDistributeTokenPerShare_; }
      set {
        accDistributeTokenPerShare_ = value;
      }
    }

    /// <summary>Field number for the "totalAmount" field.</summary>
    public const int TotalAmountFieldNumber = 5;
    private global::AElf.Types.BigIntValue totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolInfoStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolInfoStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LpToken != other.LpToken) return false;
      if (AllocPoint != other.AllocPoint) return false;
      if (LastRewardBlock != other.LastRewardBlock) return false;
      if (!object.Equals(AccDistributeTokenPerShare, other.AccDistributeTokenPerShare)) return false;
      if (!object.Equals(TotalAmount, other.TotalAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LpToken.Length != 0) hash ^= LpToken.GetHashCode();
      if (AllocPoint != 0L) hash ^= AllocPoint.GetHashCode();
      if (LastRewardBlock != 0L) hash ^= LastRewardBlock.GetHashCode();
      if (accDistributeTokenPerShare_ != null) hash ^= AccDistributeTokenPerShare.GetHashCode();
      if (totalAmount_ != null) hash ^= TotalAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LpToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LpToken);
      }
      if (AllocPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastRewardBlock);
      }
      if (accDistributeTokenPerShare_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AccDistributeTokenPerShare);
      }
      if (totalAmount_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TotalAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LpToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LpToken);
      }
      if (AllocPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocPoint);
      }
      if (LastRewardBlock != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlock);
      }
      if (accDistributeTokenPerShare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccDistributeTokenPerShare);
      }
      if (totalAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolInfoStruct other) {
      if (other == null) {
        return;
      }
      if (other.LpToken.Length != 0) {
        LpToken = other.LpToken;
      }
      if (other.AllocPoint != 0L) {
        AllocPoint = other.AllocPoint;
      }
      if (other.LastRewardBlock != 0L) {
        LastRewardBlock = other.LastRewardBlock;
      }
      if (other.accDistributeTokenPerShare_ != null) {
        if (accDistributeTokenPerShare_ == null) {
          AccDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
        }
        AccDistributeTokenPerShare.MergeFrom(other.AccDistributeTokenPerShare);
      }
      if (other.totalAmount_ != null) {
        if (totalAmount_ == null) {
          TotalAmount = new global::AElf.Types.BigIntValue();
        }
        TotalAmount.MergeFrom(other.TotalAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LpToken = input.ReadString();
            break;
          }
          case 16: {
            AllocPoint = input.ReadInt64();
            break;
          }
          case 24: {
            LastRewardBlock = input.ReadInt64();
            break;
          }
          case 34: {
            if (accDistributeTokenPerShare_ == null) {
              AccDistributeTokenPerShare = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(AccDistributeTokenPerShare);
            break;
          }
          case 42: {
            if (totalAmount_ == null) {
              TotalAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(TotalAmount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolInfo : pb::IMessage<PoolInfo> {
    private static readonly pb::MessageParser<PoolInfo> _parser = new pb::MessageParser<PoolInfo>(() => new PoolInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfo(PoolInfo other) : this() {
      poolList_ = other.poolList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolInfo Clone() {
      return new PoolInfo(this);
    }

    /// <summary>Field number for the "pool_list" field.</summary>
    public const int PoolListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct> _repeated_poolList_codec
        = pb::FieldCodec.ForMessage(10, global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct.Parser);
    private readonly pbc::RepeatedField<global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct> poolList_ = new pbc::RepeatedField<global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Awaken.Contracts.PoolTwoContract.PoolInfoStruct> PoolList {
      get { return poolList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!poolList_.Equals(other.poolList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= poolList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      poolList_.WriteTo(output, _repeated_poolList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += poolList_.CalculateSize(_repeated_poolList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolInfo other) {
      if (other == null) {
        return;
      }
      poolList_.Add(other.poolList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            poolList_.AddEntriesFrom(input, _repeated_poolList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Event
  /// </summary>
  public sealed partial class Deposit : pb::IMessage<Deposit> {
    private static readonly pb::MessageParser<Deposit> _parser = new pb::MessageParser<Deposit>(() => new Deposit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deposit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit(Deposit other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deposit Clone() {
      return new Deposit(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private long pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deposit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deposit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0L) hash ^= Pid.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Pid);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pid);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deposit other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0L) {
        Pid = other.Pid;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt64();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Withdraw : pb::IMessage<Withdraw> {
    private static readonly pb::MessageParser<Withdraw> _parser = new pb::MessageParser<Withdraw>(() => new Withdraw());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Withdraw> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw(Withdraw other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Withdraw Clone() {
      return new Withdraw(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private long pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Withdraw);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Withdraw other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0L) hash ^= Pid.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Pid);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pid);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Withdraw other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0L) {
        Pid = other.Pid;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt64();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimRevenue : pb::IMessage<ClaimRevenue> {
    private static readonly pb::MessageParser<ClaimRevenue> _parser = new pb::MessageParser<ClaimRevenue>(() => new ClaimRevenue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimRevenue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRevenue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRevenue(ClaimRevenue other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      pid_ = other.pid_;
      tokenSymbol_ = other.tokenSymbol_;
      tokenType_ = other.tokenType_;
      amount_ = other.amount_ != null ? other.amount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimRevenue Clone() {
      return new ClaimRevenue(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::AElf.Types.Address user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 3;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_type" field.</summary>
    public const int TokenTypeFieldNumber = 4;
    private long tokenType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenType {
      get { return tokenType_; }
      set {
        tokenType_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 5;
    private global::AElf.Types.BigIntValue amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimRevenue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimRevenue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (Pid != other.Pid) return false;
      if (TokenSymbol != other.TokenSymbol) return false;
      if (TokenType != other.TokenType) return false;
      if (!object.Equals(Amount, other.Amount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (TokenType != 0L) hash ^= TokenType.GetHashCode();
      if (amount_ != null) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TokenSymbol);
      }
      if (TokenType != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TokenType);
      }
      if (amount_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (TokenType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenType);
      }
      if (amount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimRevenue other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::AElf.Types.Address();
        }
        User.MergeFrom(other.User);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.TokenType != 0L) {
        TokenType = other.TokenType;
      }
      if (other.amount_ != null) {
        if (amount_ == null) {
          Amount = new global::AElf.Types.BigIntValue();
        }
        Amount.MergeFrom(other.Amount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::AElf.Types.Address();
            }
            input.ReadMessage(User);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 32: {
            TokenType = input.ReadInt64();
            break;
          }
          case 42: {
            if (amount_ == null) {
              Amount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(Amount);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeightSet : pb::IMessage<WeightSet> {
    private static readonly pb::MessageParser<WeightSet> _parser = new pb::MessageParser<WeightSet>(() => new WeightSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeightSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightSet(WeightSet other) : this() {
      pid_ = other.pid_;
      newAllocationPoint_ = other.newAllocationPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightSet Clone() {
      return new WeightSet(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private long pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "new_allocation_point" field.</summary>
    public const int NewAllocationPointFieldNumber = 2;
    private long newAllocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewAllocationPoint {
      get { return newAllocationPoint_; }
      set {
        newAllocationPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeightSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeightSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (NewAllocationPoint != other.NewAllocationPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0L) hash ^= Pid.GetHashCode();
      if (NewAllocationPoint != 0L) hash ^= NewAllocationPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Pid);
      }
      if (NewAllocationPoint != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(NewAllocationPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pid);
      }
      if (NewAllocationPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewAllocationPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeightSet other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0L) {
        Pid = other.Pid;
      }
      if (other.NewAllocationPoint != 0L) {
        NewAllocationPoint = other.NewAllocationPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt64();
            break;
          }
          case 16: {
            NewAllocationPoint = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolAdded : pb::IMessage<PoolAdded> {
    private static readonly pb::MessageParser<PoolAdded> _parser = new pb::MessageParser<PoolAdded>(() => new PoolAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolAdded(PoolAdded other) : this() {
      token_ = other.token_;
      pid_ = other.pid_;
      allocationPoint_ = other.allocationPoint_;
      lastRewardBlockHeight_ = other.lastRewardBlockHeight_;
      poolType_ = other.poolType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolAdded Clone() {
      return new PoolAdded(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private long pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "allocation_point" field.</summary>
    public const int AllocationPointFieldNumber = 3;
    private long allocationPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllocationPoint {
      get { return allocationPoint_; }
      set {
        allocationPoint_ = value;
      }
    }

    /// <summary>Field number for the "last_reward_block_height" field.</summary>
    public const int LastRewardBlockHeightFieldNumber = 4;
    private long lastRewardBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRewardBlockHeight {
      get { return lastRewardBlockHeight_; }
      set {
        lastRewardBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "pool_type" field.</summary>
    public const int PoolTypeFieldNumber = 5;
    private long poolType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PoolType {
      get { return poolType_; }
      set {
        poolType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (Pid != other.Pid) return false;
      if (AllocationPoint != other.AllocationPoint) return false;
      if (LastRewardBlockHeight != other.LastRewardBlockHeight) return false;
      if (PoolType != other.PoolType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Pid != 0L) hash ^= Pid.GetHashCode();
      if (AllocationPoint != 0L) hash ^= AllocationPoint.GetHashCode();
      if (LastRewardBlockHeight != 0L) hash ^= LastRewardBlockHeight.GetHashCode();
      if (PoolType != 0L) hash ^= PoolType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Token);
      }
      if (Pid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Pid);
      }
      if (AllocationPoint != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AllocationPoint);
      }
      if (LastRewardBlockHeight != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastRewardBlockHeight);
      }
      if (PoolType != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PoolType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Pid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Pid);
      }
      if (AllocationPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AllocationPoint);
      }
      if (LastRewardBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRewardBlockHeight);
      }
      if (PoolType != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PoolType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolAdded other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Pid != 0L) {
        Pid = other.Pid;
      }
      if (other.AllocationPoint != 0L) {
        AllocationPoint = other.AllocationPoint;
      }
      if (other.LastRewardBlockHeight != 0L) {
        LastRewardBlockHeight = other.LastRewardBlockHeight;
      }
      if (other.PoolType != 0L) {
        PoolType = other.PoolType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Token = input.ReadString();
            break;
          }
          case 16: {
            Pid = input.ReadInt64();
            break;
          }
          case 24: {
            AllocationPoint = input.ReadInt64();
            break;
          }
          case 32: {
            LastRewardBlockHeight = input.ReadInt64();
            break;
          }
          case 40: {
            PoolType = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DistributeTokenPerBlockSet : pb::IMessage<DistributeTokenPerBlockSet> {
    private static readonly pb::MessageParser<DistributeTokenPerBlockSet> _parser = new pb::MessageParser<DistributeTokenPerBlockSet>(() => new DistributeTokenPerBlockSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributeTokenPerBlockSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeTokenPerBlockSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeTokenPerBlockSet(DistributeTokenPerBlockSet other) : this() {
      newDistributeTokenPerBlock_ = other.newDistributeTokenPerBlock_ != null ? other.newDistributeTokenPerBlock_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributeTokenPerBlockSet Clone() {
      return new DistributeTokenPerBlockSet(this);
    }

    /// <summary>Field number for the "new_distribute_token_per_block" field.</summary>
    public const int NewDistributeTokenPerBlockFieldNumber = 1;
    private global::AElf.Types.BigIntValue newDistributeTokenPerBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue NewDistributeTokenPerBlock {
      get { return newDistributeTokenPerBlock_; }
      set {
        newDistributeTokenPerBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributeTokenPerBlockSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributeTokenPerBlockSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewDistributeTokenPerBlock, other.NewDistributeTokenPerBlock)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newDistributeTokenPerBlock_ != null) hash ^= NewDistributeTokenPerBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newDistributeTokenPerBlock_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewDistributeTokenPerBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newDistributeTokenPerBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewDistributeTokenPerBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributeTokenPerBlockSet other) {
      if (other == null) {
        return;
      }
      if (other.newDistributeTokenPerBlock_ != null) {
        if (newDistributeTokenPerBlock_ == null) {
          NewDistributeTokenPerBlock = new global::AElf.Types.BigIntValue();
        }
        NewDistributeTokenPerBlock.MergeFrom(other.NewDistributeTokenPerBlock);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (newDistributeTokenPerBlock_ == null) {
              NewDistributeTokenPerBlock = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(NewDistributeTokenPerBlock);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HalvingPeriodSet : pb::IMessage<HalvingPeriodSet> {
    private static readonly pb::MessageParser<HalvingPeriodSet> _parser = new pb::MessageParser<HalvingPeriodSet>(() => new HalvingPeriodSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HalvingPeriodSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HalvingPeriodSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HalvingPeriodSet(HalvingPeriodSet other) : this() {
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HalvingPeriodSet Clone() {
      return new HalvingPeriodSet(this);
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 1;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HalvingPeriodSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HalvingPeriodSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Period != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HalvingPeriodSet other) {
      if (other == null) {
        return;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Period = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePool : pb::IMessage<UpdatePool> {
    private static readonly pb::MessageParser<UpdatePool> _parser = new pb::MessageParser<UpdatePool>(() => new UpdatePool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Awaken.Contracts.PoolTwoContract.PoolTwoContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool(UpdatePool other) : this() {
      pid_ = other.pid_;
      distributeTokenAmount_ = other.distributeTokenAmount_ != null ? other.distributeTokenAmount_.Clone() : null;
      updateBlockHeight_ = other.updateBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePool Clone() {
      return new UpdatePool(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "distribute_token_amount" field.</summary>
    public const int DistributeTokenAmountFieldNumber = 2;
    private global::AElf.Types.BigIntValue distributeTokenAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.BigIntValue DistributeTokenAmount {
      get { return distributeTokenAmount_; }
      set {
        distributeTokenAmount_ = value;
      }
    }

    /// <summary>Field number for the "update_block_height" field.</summary>
    public const int UpdateBlockHeightFieldNumber = 3;
    private long updateBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateBlockHeight {
      get { return updateBlockHeight_; }
      set {
        updateBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(DistributeTokenAmount, other.DistributeTokenAmount)) return false;
      if (UpdateBlockHeight != other.UpdateBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (distributeTokenAmount_ != null) hash ^= DistributeTokenAmount.GetHashCode();
      if (UpdateBlockHeight != 0L) hash ^= UpdateBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (distributeTokenAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DistributeTokenAmount);
      }
      if (UpdateBlockHeight != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UpdateBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (distributeTokenAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DistributeTokenAmount);
      }
      if (UpdateBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePool other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.distributeTokenAmount_ != null) {
        if (distributeTokenAmount_ == null) {
          DistributeTokenAmount = new global::AElf.Types.BigIntValue();
        }
        DistributeTokenAmount.MergeFrom(other.DistributeTokenAmount);
      }
      if (other.UpdateBlockHeight != 0L) {
        UpdateBlockHeight = other.UpdateBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (distributeTokenAmount_ == null) {
              DistributeTokenAmount = new global::AElf.Types.BigIntValue();
            }
            input.ReadMessage(DistributeTokenAmount);
            break;
          }
          case 24: {
            UpdateBlockHeight = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
