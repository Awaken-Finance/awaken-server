// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: dividend_pool_contract.proto
// </auto-generated>
// Original file comments:
// This files is part of the Hello World smart contract example that is included in Boilerplate.
// It is only the definition of the contract, implementation is located in the "contract" folder
// and tests are located in the "test" folder.
//
// You can use this as a basic template for new contracts.
// 
// When building Boilerplate or the contract project located in the "../contract/Awaken.Contracts.DividendPool/" 
// protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
// "../contract/Awaken.Contracts.DividendPool/Protobuf/Generated/" folder. 
//
// the version of the language, use proto3 for contracts
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace Awaken.Contracts.DividendPoolContract {

  #region Events
  public partial class UpdatePool : aelf::IEvent<UpdatePool>
  {
    public global::System.Collections.Generic.IEnumerable<UpdatePool> GetIndexed()
    {
      return new List<UpdatePool>
      {
      };
    }

    public UpdatePool GetNonIndexed()
    {
      return new UpdatePool
      {
        Pid = Pid,
        Token = Token,
        Reward = Reward,
        AccPerShare = AccPerShare,
        BlockHeigh = BlockHeigh,
      };
    }
  }

  public partial class Harvest : aelf::IEvent<Harvest>
  {
    public global::System.Collections.Generic.IEnumerable<Harvest> GetIndexed()
    {
      return new List<Harvest>
      {
      };
    }

    public Harvest GetNonIndexed()
    {
      return new Harvest
      {
        To = To,
        Amount = Amount,
        Token = Token,
        Pid = Pid,
      };
    }
  }

  public partial class Deposit : aelf::IEvent<Deposit>
  {
    public global::System.Collections.Generic.IEnumerable<Deposit> GetIndexed()
    {
      return new List<Deposit>
      {
      };
    }

    public Deposit GetNonIndexed()
    {
      return new Deposit
      {
        User = User,
        Pid = Pid,
        Amount = Amount,
      };
    }
  }

  public partial class Withdraw : aelf::IEvent<Withdraw>
  {
    public global::System.Collections.Generic.IEnumerable<Withdraw> GetIndexed()
    {
      return new List<Withdraw>
      {
      };
    }

    public Withdraw GetNonIndexed()
    {
      return new Withdraw
      {
        User = User,
        Pid = Pid,
        Amount = Amount,
      };
    }
  }

  public partial class SetCycle : aelf::IEvent<SetCycle>
  {
    public global::System.Collections.Generic.IEnumerable<SetCycle> GetIndexed()
    {
      return new List<SetCycle>
      {
      };
    }

    public SetCycle GetNonIndexed()
    {
      return new SetCycle
      {
        Cycle = Cycle,
      };
    }
  }

  public partial class AddToken : aelf::IEvent<AddToken>
  {
    public global::System.Collections.Generic.IEnumerable<AddToken> GetIndexed()
    {
      return new List<AddToken>
      {
      };
    }

    public AddToken GetNonIndexed()
    {
      return new AddToken
      {
        TokenSymbol = TokenSymbol,
        Index = Index,
      };
    }
  }

  public partial class NewReward : aelf::IEvent<NewReward>
  {
    public global::System.Collections.Generic.IEnumerable<NewReward> GetIndexed()
    {
      return new List<NewReward>
      {
      };
    }

    public NewReward GetNonIndexed()
    {
      return new NewReward
      {
        Token = Token,
        PerBlocks = PerBlocks,
        Amount = Amount,
        StartBlock = StartBlock,
        EndBlock = EndBlock,
      };
    }
  }

  public partial class AddPool : aelf::IEvent<AddPool>
  {
    public global::System.Collections.Generic.IEnumerable<AddPool> GetIndexed()
    {
      return new List<AddPool>
      {
      };
    }

    public AddPool GetNonIndexed()
    {
      return new AddPool
      {
        Token = Token,
        AllocPoint = AllocPoint,
        LastRewardBlock = LastRewardBlock,
        Pid = Pid,
      };
    }
  }

  public partial class SetPool : aelf::IEvent<SetPool>
  {
    public global::System.Collections.Generic.IEnumerable<SetPool> GetIndexed()
    {
      return new List<SetPool>
      {
      };
    }

    public SetPool GetNonIndexed()
    {
      return new SetPool
      {
        Pid = Pid,
        AllocationPoint = AllocationPoint,
      };
    }
  }

  #endregion
}
#endregion

